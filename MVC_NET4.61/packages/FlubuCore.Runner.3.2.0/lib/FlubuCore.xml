<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlubuCore</name>
    </assembly>
    <members>
        <member name="T:FlubuCore.BuildScript">
            <summary>
            Build script template.
            </summary>
        </member>
        <member name="T:FlubuCore.Context.BuildPropertiesSession">
            <summary>
            Used for storing task context properties into session.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.BuildPropertiesSession._properties">
            <summary>
            name value dictionary used for storing differend task context properties.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildPropertiesSession.Item(System.String)">
            <summary>
            Property indexer.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Get``1(System.String,System.Boolean,System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">if true key is not case sensitive. Otherwise it is.</param>
            <param name="memberName"></param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Get``1(System.String,``0,System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="defaultValue">Returned value if property is not set in session.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Has(System.String)">
            <summary>
            Checks by property name if property is stored in session.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.EnumerateProperties">
            <summary>
            Enumerates all properties
            </summary>
            <returns>Enumareted properties.</returns>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Set``1(System.String,``0)">
            <summary>
            Set's property in session.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The propery value.</param>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Clear">
            <summary>
            Clear all properties from session.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.BuildPropertiesSession.Remove(System.String)">
            <summary>
            Removes the specified property from session.
            </summary>
            <param name="propertyName">The name of property to be removed.</param>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.IsRunningOnAppVeyor">
            <summary>
            Indicates whether build is running on AppVeyor build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.BuildId">
            <summary>
            Gets the build id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.BuildWorkingFolder">
            <summary>
            Get's the build folder.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.CommitId">
            <summary>
            Get's the commit id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.CommitAuthor">
            <summary>
            Get's the commit author.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.CommitTimeStamp">
            <summary>
            Get's the commit timestamp.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.CommitMessage">
            <summary>
            Get's the commit message.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.AppVeyor.CommitMessageExtended">
            <summary>
            Get's the commit message.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Bamboo.IsRunningOnBamboo">
            <summary>
            Indicates whether build is running on Bamboo build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Bamboo.BuildKey">
            <summary>
            Gets the build id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Bamboo.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Bamboo.BuildWorkingFolder">
            <summary>
            Get's the build folder.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Bamboo.CommitId">
            <summary>
            Get's the commit id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.BitRise.IsRunningOnBitrise">
            <summary>
            Indicates whether build is running on Bitrise build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.BitRise.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.BitRise.CommitId">
            <summary>
            Get's the commit id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.ContinuaCl.IsRunningOnContinuaCl">
            <summary>
            Indicates whether build is running on ContinuaCL build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.ContinuaCl.CommitId">
            <summary>
            Get's the commit id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.GitLab.IsRunningOnGitLabCi">
            <summary>
            Indicates whether build is running on GitLab Ci.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.GoCD.IsRunningOnGoCD">
            <summary>
            Indicates whether build is running on GoCd build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.GoCD.CommitId">
            <summary>
            The commitId
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Jenkins.IsRunningOnJenkins">
            <summary>
            Indicates whether build is running on Jenkins build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Jenkins.BuildNumber">
            <summary>
            Gets the build number which is identical to build id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.MyGet.IsRunningOnMyGet">
            <summary>
            Indicates whether build is running on MyGet
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.TeamCity.IsRunningOnTeamCity">
            <summary>
            Indicates whether build is running on TeamCity build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.TeamCity.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.TeamFoundation.IsRunningOnTFS">
            <summary>
            Indicates whether build is running on Team foundation server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.TeamFoundation.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Travis.IsRunningOnTravis2">
            <summary>
            Indicates whether build is running on Travis build server.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Travis.BuildId">
            <summary>
            Gets the build id.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Travis.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Travis.BuildWorkingFolder">
            <summary>
            Get's the build folder.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.BuildServers.Travis.CommitId">
            <summary>
            Get's the commit id.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.ContextPropertiesExtensions.GetSqlCmdExecutable(FlubuCore.Context.IBuildPropertiesSession)">
            <summary>
                Get the context variable for SqlCmd executable
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ContextPropertiesExtensions.SetSqlCmdExecutable(FlubuCore.Context.ITaskContextInternal,System.String)">
            <summary>
                Set the context variable for SqlCmd executable
            </summary>
            <param name="context"></param>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Context.DefaultTargets">
            <summary>
            Target to be added
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.None">
            <summary>
            Noone of the tearges are added
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.Dotnet">
            <summary>
            Default dotnet target are added (compile...)
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.Core">
            <summary>
            Default dotnet core targets are added
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.LinuxTasks">
            <summary>
            Task specific for Linux operating system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.ExecuteDotnetTask(System.String)">
            <summary>
            Executes specified dotnet command.
            </summary>
            <param name="command">Commdand to execute</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.ExecuteDotnetTask(FlubuCore.Tasks.NetCore.StandardDotnetCommands)">
            <summary>
            Executes specified dotnet command.
            </summary>
            <param name="command">Commdand to execute.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.UpdateNetCoreVersionTask(System.String[])">
            <summary>
            Updates the version in csproj or project.json file
            </summary>
            <param name="files">The project files to update.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Restore(System.String,System.String)">
            <summary>
            Restores the dependencies and tools for a given application / project.
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Publish(System.String,System.String,System.String)">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Build(System.String,System.String)">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Pack">
            <summary>
            command builds the project and creates NuGet packages. The result of this command is a NuGet package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Test">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Clean">
            <summary>
            Cleans the output of a project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.NugetPush(System.String)">
            <summary>
            Pushes the nuget package to nuget server.
            </summary>
            <param name="packagePath">Path to .nupkg file</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.CoverletTask(System.String)">
            <summary>
            Coverlet is a cross platform code coverage library for .NET Core, with support for line, branch and method coverage.
            more info at: https://github.com/tonerdo/coverlet
            </summary>
            <param name="assembly">Path to the test assembly.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Pull">
            <summary>
            Incorporates changes from a remote repository into the current branch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Commit">
            <summary>
            Stores the current contents of the index in a new commit along with a log message from the user describing the changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Push">
            <summary>
            Updates remote refs using local refs, while sending objects necessary to complete the given refs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Clone(System.String,System.String)">
            <summary>
            Clones specified existring git repository into specified directory.
            </summary>
            <param name="repository">Url of the repository to clone.</param>
            <param name="directory">Directory where reposiotry will be cloned to.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Checkout(System.String)">
            <summary>
            Checkout specified branch.
            </summary>
            <param name="branch">Branch to checkout.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Add">
            <summary>
            This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Tag(System.String)">
            <summary>
            Add a tag reference in refs/tags/, unless -d/-l/-v is given to delete, list or verify tags.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.RemoveFile(System.String)">
            <summary>
            Remove files from the index, or from the working tree and the index. git rm will not remove a file from just your working directory.
            </summary>
            <param name="file">Files to remove. Fileglobs (e.g. *.c) can be given to remove all matching files.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.Submodule">
            <summary>
            Create raw submodule GIT command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.InitSubmodules">
            <summary>
            Create submodules init task with --init and --recursive arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface.PullSubmodules">
            <summary>
            Create submodules pull task with --remote and --merge arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateWebsiteTask">
            <summary>
            Task creates new web site in iis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateWebApplicationTask(System.String)">
            <summary>
            Task created new web application on the specified web site in iis
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateAppPoolTask(System.String)">
            <summary>
            Task creates new application pool in iis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.DeleteAppPoolTask(System.String)">
            <summary>
            Task delentes specified Application pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.ControlAppPoolTask(System.String,FlubuCore.Tasks.Iis.ControlApplicationPoolAction)">
            <summary>
            /Task for controlling the application pool (start, stop)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.AddWebsiteBindingTask">
            <summary>
            Task adds binding to existing web site.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SystemCtlTask(System.String,System.String)">
            <summary>
            Run's system ctl.
            </summary>
            <param name="command"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCommand(System.String,System.String,System.String)">
            <summary>
            Run specified command on the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCommand(System.String,System.String)">
            <summary>
            Run specified command on the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCopy(System.String,System.String,System.String)">
            <summary>
            Copy projects/files to the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCopy(System.String,System.String)">
            <summary>
            Copy projects/files to the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTask(FlubuCore.Tasks.ITask[])">
            <summary>
            Add multiple tasks to the target.
            </summary>
            <param name="tasks">Array of <see cref="T:FlubuCore.Targeting.ITargetInternal"/> to add.</param>
            <returns>This same instance of <see cref="N:FlubuCore.Targeting" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified task to the target.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddCoreTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified .net core task to the target.
            </summary>
            <param name="task">The .net core task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddCoreTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified .net core task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do(System.Action{FlubuCore.Context.ITaskContext},System.Action{FlubuCore.Tasks.DoTask})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do``1(System.Action{FlubuCore.Context.ITaskContext,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}})">
            <summary>
            Execute custom code in script. . U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do``2(System.Action{FlubuCore.Context.ITaskContext,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do``3(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do``4(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Do``5(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync(System.Action{FlubuCore.Context.ITaskContext},System.Action{FlubuCore.Tasks.DoTask})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync(System.Func{FlubuCore.Context.ITaskContext,System.Threading.Tasks.Task},System.Action{FlubuCore.Tasks.DoTaskAsync})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``1(System.Action{FlubuCore.Context.ITaskContext,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``1(System.Func{FlubuCore.Context.ITaskContext,``0,System.Threading.Tasks.Task},``0,System.Action{FlubuCore.Tasks.DoTaskAsync2{``0}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``2(System.Action{FlubuCore.Context.ITaskContext,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``2(System.Func{FlubuCore.Context.ITaskContext,``0,``1,System.Threading.Tasks.Task},``0,``1,System.Action{FlubuCore.Tasks.DoTaskAsync3{``0,``1}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``3(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``3(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTaskAsync4{``0,``1,``2}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``4(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``4(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,System.Threading.Tasks.Task},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTaskAsync5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``5(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DoAsync``5(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTaskAsync6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DependsOn(FlubuCore.Targeting.ITargetInternal[])">
            <summary>
                Specifies targets on which this target depends on. Execution of dependant targets is synchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DependsOnAsync(FlubuCore.Targeting.ITargetInternal[])">
            <summary>
                Specifies targets on which this target depends on. Execution of dependant targets is asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DependsOn(FlubuCore.Context.FluentInterface.Interfaces.ITarget[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.DependsOnAsync(FlubuCore.Context.FluentInterface.Interfaces.ITarget[])">
            <summary>
            Specifies targets on which this target depends on. Execution of dependant targets is asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget})">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``1(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0},``0)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``2(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1},``0,``1)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``3(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2},``0,``1,``2)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``4(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``5(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``6(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``7(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.AddTasks``8(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITarget,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Adds set of tasks to target.
            </summary>
            <param name="action">Define tasks to be added to target.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITarget.Group(System.Action{FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT{FlubuCore.Context.FluentInterface.Interfaces.ITarget}},System.Action{FlubuCore.Context.ITaskContext},System.Action{FlubuCore.Context.ITaskContext,System.Exception},System.Func{FlubuCore.Context.ITaskContext,System.Boolean},System.Boolean)">
            <summary>
            Group tasks and perform various actions(onFinally, onError, when) on tasks.
            </summary>
            <param name="targetAction">specify tasks to add in target action.</param>
            <param name="onFinally">action that will be taken when all task finish or when error occures.</param>
            <param name="onError">action that will be taken on any task actions</param>
            <param name="when">Tasks will be added only if specified condition is meet.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.AddTask(FlubuCore.Tasks.ITask[])">
            <summary>
            Add multiple tasks to the target.
            </summary>
            <param name="tasks">Array of <see cref="T:FlubuCore.Targeting.ITargetInternal"/> to add.</param>
            <returns>This same instance of <see cref="N:FlubuCore.Targeting" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.AddTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified task to the target.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.AddCoreTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified .net core task to the target.
            </summary>
            <param name="task">The .net core task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.AddTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.AddCoreTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the specified .net core task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do(System.Action{FlubuCore.Context.ITaskContext},System.Action{FlubuCore.Tasks.DoTask})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do``1(System.Action{FlubuCore.Context.ITaskContext,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}})">
            <summary>
            Execute custom code in script. . U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do``2(System.Action{FlubuCore.Context.ITaskContext,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameter.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do``3(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do``4(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Do``5(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync(System.Action{FlubuCore.Context.ITaskContext},System.Action{FlubuCore.Tasks.DoTask})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync(System.Func{FlubuCore.Context.ITaskContext,System.Threading.Tasks.Task},System.Action{FlubuCore.Tasks.DoTaskAsync})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``1(System.Action{FlubuCore.Context.ITaskContext,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``1(System.Func{FlubuCore.Context.ITaskContext,``0,System.Threading.Tasks.Task},``0,System.Action{FlubuCore.Tasks.DoTaskAsync2{``0}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``2(System.Action{FlubuCore.Context.ITaskContext,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``2(System.Func{FlubuCore.Context.ITaskContext,``0,``1,System.Threading.Tasks.Task},``0,``1,System.Action{FlubuCore.Tasks.DoTaskAsync3{``0,``1}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``3(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``3(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTaskAsync4{``0,``1,``2}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``4(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``4(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,System.Threading.Tasks.Task},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTaskAsync5{``0,``1,``2,``3}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``5(System.Action{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.DoAsync``5(System.Func{FlubuCore.Context.ITaskContext,``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTaskAsync6{``0,``1,``2,``3,``4}})">
            <summary>
            Execute custom code in script asynchronous. U can invoke base task actions through optional parameters.
            </summary>
            <param name="doAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.When(System.Func{FlubuCore.Context.ITaskContext,System.Boolean})">
            <summary>
            Target executes action specified before when only if specified <see cref="!:condition"/> is meet.
            </summary>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetBaseFluentInterfaceOfT`1.Must(System.Func{System.Boolean})">
            <summary>
            Condition to be checked before target is executed. If <see cref="!:condition"/> is not meet execution of script fails.
            </summary>
            <param name="condition">The condition to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.RunProgramTask(System.String)">
            <summary>
            Task runs the specified program.
            </summary>
            <param name="programToExecute">The program to execute.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)">
            <summary>
             Copies a directory tree from the source to the destination.
            </summary>
            <param name="sourcePath">Path of the source directory</param>
            <param name="destinationPath">Path where directory will be copied to.</param>
            <param name="overwriteExisting">If <c>True</c> directory on the destination path is overwriten if it exists. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CreateHttpClient(System.String)">
            <summary>
            Creates new <see cref="T:System.Net.Http.HttpClient"/> or get's existing one. Depending on the base url.
            </summary>
            <remarks></remarks>
            <param name="baseUrl">The base url</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NuGetCmdLineTask(System.String,System.String)">
            <summary>
            Execute NuGet command line tool.
            </summary>
            <param name="command">The nuget command to be executed. See nuget.exe help for command list.</param>
            <param name="workingDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.PublishNuGetPackageTask(System.String,System.String)">
            <summary>
            Creates Nupkg file from nuspec file and publises it to the nuget server.
            </summary>
            <param name="packageId">Id of the nuget package.</param>
            <param name="nuspecFileName">Path to the nuspec file.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.PackageTask(System.String)">
            <summary>
            Task Packages specified directories and files into specified directory or zip file.
            </summary>
            <param name="destinationRootDir">The destination directory where the package will be created.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CompileSolutionTask">
            <summary>
            Task compiles the solution with MSBuild. Solution and build configuration is retrived from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CompileSolutionTask(System.String,System.String)">
            <summary>
            Task compiles specified solution with MsBuild
            </summary>
            <param name="solutionFileName">The file name of the solution to be compiled</param>
            <param name="buildConfiguration">The build configuration solution will be compiled in(Release, Debug...)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.LoadSolutionTask">
            <summary>
            Task load's solution information to the <see cref="T:FlubuCore.Context.BuildPropertiesSession"/> <see cref="F:FlubuCore.Context.BuildProps.Solution"/> solution file name is retieved from <see cref="T:FlubuCore.Context.BuildPropertiesSession"/>
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.LoadSolutionTask(System.String)">
            <summary>
            Task load's specified vs solution information to the <see cref="T:FlubuCore.Context.BuildPropertiesSession"/> <see cref="F:FlubuCore.Context.BuildProps.Solution"/>.
            </summary>
            <param name="solutionFileName">The solution file name of the solution to be loaded.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CoverageReportTask(System.String[])">
            <summary>
            Runs the cooverage report generator tool
            </summary>
            <param name="inputFiles"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CleanOutputTask">
            <summary>
            Cleans the output directories of all projects in the solution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskForNunitV3(System.String[])">
            <summary>
            Task runs nunit tests that are in specified project with command line options for nunit v3.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskForNunitV2(System.String[])">
            <summary>
            Task runs nunit tests that are in specified project with command line options for nunit v2.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskByProjectName(System.String[])">
            <summary>
            Task runs nunit tests that are in specified project without any default command line options.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTask(FlubuCore.Tasks.Testing.NunitCmdOptions,System.String[])">
            <summary>
            Task runs NUnit tests that are in specified project.
            </summary>
            <param name="cmdOptions">Adds default command line options for specified NUnit version.</param>
            <param name="projectName">The project.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskByAssemblyName(System.String[])">
            <summary>
            Task runs nunit tests that are in specified assembly.
            </summary>
            <param name="testAssemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.XunitTaskByProjectName(System.String[])">
            <summary>
            Task runs xunit test that are in specified project.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.XunitTaskByAsssemblyName(System.String[])">
            <summary>
            Task runs xunit tests that are in specified assembly.
            </summary>
            <param name="testAssemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitWithDotCover(System.String,System.String[])">
            <summary>
            Task will execute tests in the specified <see cref="!:testAssemblyFileNames"/> list of test assemblies using
            the specified NUnit test runner executable.
            </summary>
            <param name="nunitRunnerFileName">The file path to NUnit's console runner.</param>
            <param name="testAssemblyFileNames">The list of of file paths to the assemblies containing unit tests.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitWithDotCover(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Task  will execute tests in the specified <see cref="!:testAssemblyFileNames"/> list of test assemblies using
            the specified NUnit test runner executable.
            </summary>
            <param name="nunitRunnerFileName">The file path to NUnit's console runner.</param>
            <param name="testAssemblyFileNames">The list of of file paths to the assemblies containing unit tests.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ReplaceTokensTask(System.String)">
            <summary>
            Task replaces specified tokens in given file.
            </summary>
            <param name="sourceFileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UpdateJsonFileTask(System.String)">
            <summary>
            Update's specified json.
            </summary>
            <param name="fileName">File name of the json to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.FetchBuildVersionFromFileTask">
            <summary>
            Task Fetches build version from file. By default task fetches from file named: {ProductId}.ProjectVersion.Txt
            Where ProductId is fetched from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/> build property named: <see cref="F:FlubuCore.Context.BuildProps.ProductId"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.FetchVersionFromExternalSourceTask">
            <summary>
            Task fetches build and revision number from external soruce(build system).
            Supported build systems by default: AppVeyor, Bamboo, Bitrise, ContinousCl, Jenkins, TFS, TeamCity, TravisCI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GenerateCommonAssemblyInfoTask">
            <summary>
            Generate's common assembly info file. Information is taken from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GenerateCommonAssemblyInfoTask(System.Version)">
            <summary>
            Task generate's common assembly info file. Information is taken from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.OpenCoverToCoberturaTask(System.String,System.String)">
            <summary>
            Task runs open cover to cobertuta tool.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.OpenCoverTask">
            <summary>
            Task runs open cover tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UnzipTask(System.String,System.String)">
            <summary>
            Task unzip specified zip to specified locattion.
            </summary>
            <param name="zip">Zip file to be unziped</param>
            <param name="destionation">Destination path where zip content will be unziped.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GitTasks">
            <summary>
            Git specific tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GitVersionTask">
            <summary>
            GitVersion is a tool to help you achieve Semantic Versioning on your project.
            https://gitversion.readthedocs.io/en/latest/
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.DockerTasks">
            <summary>
            Docker specific tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.IisTasks">
            <summary>
            Internet information service specific tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.FlubuWebApiTasks">
            <summary>
            Flubu web api specific tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CopyFileTask(System.String,System.String,System.Boolean)">
            <summary>
            Task copies file to specified location.
            </summary>
            <param name="sourceFileName">File to be copied</param>
            <param name="destinationFileName"></param>
            <param name="overwrite">If <c>true</c> file is owerwriten if exists. Otherwise not</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.TouchFile(System.String)">
            <summary>
            Task touches (set last write time) specified file.
            </summary>
            <param name="fileName">File to touch.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CreateDirectoryTask(System.String,System.Boolean)">
            <summary>
            Task creates directory.
            </summary>
            <param name="directoryPath"></param>
            <param name="forceRecreate">If <c>true</c> directory is deleted if it exists and then created again.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.DeleteDirectoryTask(System.String,System.Boolean)">
            <summary>
            Task deletes directory.
            </summary>
            <param name="directoryPath">Path of the directoy to be deleted</param>
            <param name="failIfNotExists">If <c>true</c> task fails if excetpion. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.DeleteFilesTask(System.String,System.String,System.Boolean)">
            <summary>
            Task deletes files in specified directory.
            </summary>
            <param name="directoryPath">Path of the directoy files to be deleted in</param>
            <param name="filePattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters but doesnt support regular expressions.</param>
            <param name="recursive">If <c>true</c> files in subdirectories is searched. Otherwise only in root directory.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.MergeConfigurationTask(System.String,System.String[])">
            <summary>
            Merges multiple configuration files into one.
            </summary>
            <param name="outFile"></param>
            <param name="sourceFiles"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ReplaceTextTask(System.String,System.Tuple{System.String,System.String}[])">
            <summary>
            Task Replaces text in file.
            </summary>
            <param name="sourceFile">File path.</param>
            <param name="tokens">Fist paramteter text to be replaced. Second parameter text to be replaced with</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UpdateXmlFileTask(System.String)">
            <summary>
            Task updates xml. Xml elements can be added, updated or deleted.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.Sleep(System.Int32)">
            <summary>
            Sleep for specified period of time.
            </summary>
            <param name="delay">Delay in milliseconds.</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.SleepTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.Sleep(System.TimeSpan)">
            <summary>
            Sleep for specified period of time.
            </summary>
            <param name="delay">Delay.</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.SleepTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ControlService(System.String)">
            <summary>
            Control windows service with sc.exe command.
            </summary>
            <param name="command">Command to execute (stop, start, ...)</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.ServiceControlTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ControlService(System.String,System.String)">
            <summary>
            Control windows service with sc.exe command.
            </summary>
            <param name="command">Command to execute (stop, start, ...)</param>
            <param name="serviceName">Name of the service to control.</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.ServiceControlTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ControlService(FlubuCore.Tasks.Utils.StandardServiceControlCommands,System.String)">
            <summary>
            Control windows service with sc.exe command.
            </summary>
            <param name="command">Standard command to execute</param>
            <param name="serviceName">Name of the service to control.</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.ServiceControlTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CreateWindowsService(System.String,System.String)">
            <summary>
            Creates windows service with sc.exe command.
            </summary>
            <param name="serviceName">Name of the service to control.</param>
            <param name="pathToService">path to service executable .exe</param>
            <returns><see cref="T:FlubuCore.Tasks.Utils.ServiceControlTask"/></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ExecutePowerShellScript(System.String)">
            <summary>
            Executes specified powershell script.
            </summary>
            <param name="pathToPowerShellScript">Path to the power shell script file. Use .\ for relative path.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.SqlCmdTask(System.String[])">
            <summary>
            Execute SQL script file with sqlcmd.exe
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GenerateT4Template(System.String)">
            <summary>
            Generate T4 template with TextTransform.exe utility.
            </summary>
            <param name="templateFileName">Filename to T4 transform.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IToolsFluentInterface.Install(System.String)">
            <summary>
            Installs a tool for use on the command line.
            </summary>
            <param name="nugetPackageId">NuGet Package Id of the tool to install.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IToolsFluentInterface.Update(System.String)">
            <summary>
            Updates a tool to the latest stable version for use.
            </summary>
            <param name="nugetPackageId"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IToolsFluentInterface.Uninstall(System.String)">
            <summary>
            Uninstalls a tool.
            </summary>
            <param name="nugetPackageId">NuGet Package Id of the tool to uninstall.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.UploadPackageTask(System.String,System.String)">
            <summary>
            Upload's sprecified packages to flubu web api server.
            </summary>
            <param name="directoryPath">The relative or absolute path to the directory where packages are searched.</param>
            <param name="packageSearchPattern">The search string to match against the names of files(packages). This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.ExecuteScriptTask(System.String,System.String)">
            <summary>
            Executes specified flubu scrip on flubu web api server.
            </summary>
            <param name="mainCommand">Command to be executed.</param>
            <param name="scriptFilePath">Location to the flubu script on the flubu web api server.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.GetTokenTask(System.String,System.String)">
            <summary>
            Get's the token that can access flubu web api server.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.DeletePackagesTask">
            <summary>
            Deletes all packages(cleans directory on flubu web api server).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.UploadScriptTask(System.String)">
            <summary>
            Uploads flubu script to flubu web api server.
            </summary>
            <param name="scriptFilePath"> The relative or absolute path to the flubu script to be uploaded to web api server.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.DeleteReportsTask">
            <summary>
            Deletes all reports(cleans directory on flubu web api server).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.DownloadReportsTask(System.String)">
            <summary>
            Download reports(compressed in zip file) from flubu web api server.
            </summary>
            <param name="saveAs">name of the file (path) that the reports will be saved to.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String[])">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String[])">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String[])">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.CoreTaskFluentInterfaceExtensions.CreateZipPackageFromProjects(FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String,System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <param name="runtime">Runtime to use for package folder.  Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="destinationRootDir">Name of the directory that the source directory will be copied to.</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.TaskFluentInterfaceExtensions.RunMultiProgram(FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,System.String[])">
            <summary>
            Run's multiple programs
            </summary>
            <param name="programs"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.TaskFluentInterfaceExtensions.RunProgram(FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,System.String,System.String,System.String[])">
            <summary>
            Run specified program.
            </summary>
            <param name="program"></param>
            <param name="workingFolder"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.TaskFluentInterfaceExtensions.RunProgram(FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,System.String,System.String,System.Action{FlubuCore.Tasks.Process.IRunProgramTask})">
            <summary>
            Run specified program.
            </summary>
            <param name="program"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Context.FluentInterface.TaskFluentInterface">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.#ctor(FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface,FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface,FlubuCore.Context.FluentInterface.Interfaces.IGitFluentInterface,FlubuCore.Context.FluentInterface.DockerFluentInterface,FlubuCore.Infrastructure.IHttpClientFactory)">
            <inheritdoc />
        </member>
        <member name="P:FlubuCore.Context.FluentInterface.TaskFluentInterface.Context">
            <summary>
            Get or set <see cref="T:FlubuCore.Context.TaskContext"/> for fluent interface.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.RunProgramTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)" /> class
                using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NuGetCmdLineTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.PublishNuGetPackageTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.PackageTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CompileSolutionTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CompileSolutionTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.LoadSolutionTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.LoadSolutionTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskForNunitV3(System.String[])">
            <inheritdoc />
            <summary>
            Initializes NunitTask with default command line options for nunit V3.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskForNunitV2(System.String[])">
            <inheritdoc />
            <summary>
            Initializes NunitTask with default command line options for nunit V2.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskByProjectName(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskByAssemblyName(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitWithDotCover(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitWithDotCover(System.String,System.Collections.Generic.IList{System.String})">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.ReplaceTokensTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.UpdateJsonFileTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.FetchBuildVersionFromFileTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.FetchVersionFromExternalSourceTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.GenerateCommonAssemblyInfoTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.GenerateCommonAssemblyInfoTask(System.Version)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CoverageReportTask(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.OpenCoverToCoberturaTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.OpenCoverTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.UnzipTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.IisTasks">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.FlubuWebApiTasks">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CopyFileTask(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.TouchFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CreateDirectoryTask(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.DeleteDirectoryTask(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.DeleteFilesTask(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.MergeConfigurationTask(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.ReplaceTextTask(System.String,System.Tuple{System.String,System.String}[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CleanOutputTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.UpdateXmlFileTask(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.Sleep(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.Sleep(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.ControlService(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlubuCore.Context.FromArgAttribute">
            <summary>
            FromArg is used to pass command line arguments, settings from json configuration file or environment variables to script.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FromArgAttribute.#ctor(System.String,System.String,System.Char)">
            <summary>
            FromArg is used to pass command line arguments, settings from json configuration file or environment variables to script.
            </summary>
            <param name="argKey">The argument key.</param>
            <param name="help">Argument help displayed in FlubuCore tool.</param>
            <param name="seperator">Value separator when passing lists.</param>
        </member>
        <member name="P:FlubuCore.Context.IBuildPropertiesContext.Properties">
            <summary>
                Build properties stored in session
            </summary>
        </member>
        <member name="P:FlubuCore.Context.IBuildPropertiesSession.Item(System.String)">
            <summary>
            Property indexer.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Get``1(System.String,System.Boolean,System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="memberName">Leave it empty! Property is auto assigned by FlubuCore.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Get``1(FlubuCore.Context.PredefinedBuildProperties)">
            <summary>
            Get's the property that predefined by flubu by property name. All properties can also be overriden
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.TryGet``1(System.String,System.String)">
            <summary>
            Get's the property by property name. If it doesn't exist null is returned.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="memberName">Leave it empty! Property is auto assigned by FlubuCore.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Get``1(System.String,``0,System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="defaultValue">Returned value if property is not set in session.</param>
            <param name="memberName">Leave it empty! Property is auto assigned by FlubuCore.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Has(System.String)">
            <summary>
            Checks by property name if property is stored in session.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.EnumerateProperties">
            <summary>
            Enumerates all properties
            </summary>
            <returns>Enumareted properties.</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Set``1(System.String,``0)">
            <summary>
            Set's property in session.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The propery value.</param>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Clear">
            <summary>
            Clear all properties from session.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Remove(System.String)">
            <summary>
            Removes the specified property from session.
            </summary>
            <param name="propertyName">The name of property to be removed.</param>
        </member>
        <member name="P:FlubuCore.Context.IBuildSystem.IsLocalBuild">
            <summary>
            If <c>true</c> build is local. Otherwise it is running on known build server. See <see cref="T:FlubuCore.Context.BuildSystemType"/> for known build servers.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.IBuildSystem.RunningOn">
            <summary>
            Gets a value on which type of build server the build is running.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.CoreTasks">
            <summary>
            Fluent interface for creating .net core tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.Tasks">
            <summary>
            Fluent interface for creating tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.CreateTarget(System.String)">
            <summary>
            Fluent interface for target creation. It creates The target and Add's it to the TargetTree.
            </summary>
            <param name="name">The target name.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.BuildSystems">
            <summary>
            Interaction with various build systems.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Context.ITaskContextInternal.TargetTree">
            <summary>
            The <see cref="P:FlubuCore.Context.ITaskContextInternal.TargetTree"/>
            </summary>
        </member>
        <member name="T:FlubuCore.Context.PredefinedBuildProperties">
            <summary>
                All build properties that are predefined by flubu.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.PredefinedBuildProperties.OsPlatform">
            <summary>
                Current OS platform.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.PredefinedBuildProperties.PathToDotnetExecutable">
            <summary>
                Path to dotnet executable cli tool
            </summary>
        </member>
        <member name="F:FlubuCore.Context.PredefinedBuildProperties.UserProfileFolder">
            <summary>
                Path to user profile folder.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.PredefinedBuildProperties.OutputDir">
            <summary>
                Folder where flubu stores outputs by default.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.PredefinedBuildProperties.ProductRootDir">
            <summary>
                Root folder of the product / solution.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.TaskSession.Complete">
            <summary>
                Marks the runner as having completed its work successfully. This is the last method
                that should be called on the runner before it gets disposed.
            </summary>
        </member>
        <member name="P:FlubuCore.IO.FullPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="P:FlubuCore.IO.LocalPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="F:FlubuCore.IO.Wrappers.FileWrapper.DefaultBufferSize">
            <summary>
            This is the same default buffer size as
            <see cref="T:System.IO.StreamReader"/> and <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="F:FlubuCore.IO.Wrappers.FileWrapper.DefaultOptions">
            <summary>
            Indicates that
            1. The file is to be used for asynchronous reading.
            2. The file is to be accessed sequentially from beginning to end.
            </summary>
        </member>
        <member name="T:FlubuCore.IO.Wrappers.IFileWrapper">
            <summary>
            Wrapper interface for <see cref="T:System.IO.File"/>
            </summary>
        </member>
        <member name="M:FlubuCore.Packaging.CopyProcessor.AddSingleFileTransformation(System.String,FlubuCore.IO.LocalPath)">
            <summary>
            Defines a transformation for <see cref="T:FlubuCore.Packaging.SingleFileSource"/> which copies the file to the destination
            and renames the file in the process.
            </summary>
            <param name="sourceId">ID of the <see cref="T:FlubuCore.Packaging.SingleFileSource"/>.</param>
            <param name="destinationFileName">The destination directory and file name (local path).</param>
            <returns>This same instance of the <see cref="T:FlubuCore.Packaging.CopyProcessor"/>.</returns>
        </member>
        <member name="M:FlubuCore.Packaging.CopyProcessor.AddFileTransformation(System.String,System.String)">
            <summary>
            Replace all occurrences of source file name with newFileName.
            </summary>
            <param name="fileName">Source file name to replace.</param>
            <param name="newFileName">Replace with new name.</param>
            <returns>Returns <see cref="T:FlubuCore.Packaging.CopyProcessor"/>.</returns>
        </member>
        <member name="M:FlubuCore.Packaging.NegativeFilter.#ctor(FlubuCore.Packaging.IFileFilter)">
            <summary>
            Neagatives given filter.
            </summary>
            <param name="filter">Filter to be negatived.</param>
        </member>
        <member name="M:FlubuCore.Packaging.RegexFileFilter.#ctor(System.String)">
            <summary>
            Filter files by regex expression.
            </summary>
            <param name="filterRegexValue">The regex expression.</param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.AssemblyAttribute">
            <summary>
            Adds assembly reference to script.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.AssemblyAttribute.#ctor(System.String)">
            <summary>
            Adds assembly reference to script.
            </summary>
            <param name="pathToAssembly">Relative or absolute path to assembly.</param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.AssemblyFromDirectoryAttribute">
            <summary>
            Adds assembly references to script from specified directory.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.AssemblyFromDirectoryAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Adds assembly references to script from specified directory.
            </summary>
            <param name="directory">Directory path.</param>
            <param name="subDirectories">Include directory sub directories.</param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.IncludeAttribute">
            <summary>
            Include other c# source code file(.cs) to script.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.IncludeAttribute.#ctor(System.String)">
            <summary>
            Include other c# source code file(.cs) to script.
            </summary>
            <param name="pathToCsFile">Path to c# source code file. </param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.IncludeFromDirectoryAttribute">
            <summary>
            Include all other c# source code file(.cs) to script from specified directory.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.IncludeFromDirectoryAttribute.#ctor(System.String,System.Boolean)">
            <summary>
             Include all other c# source code file(.cs) to script from specified directory.
            </summary>
            <param name="directory">Directory path.</param>
            <param name="subDirectories">Include directory sub directories.</param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.NugetPackageAttribute">
            <summary>
            Adds nuget package reference to script.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.NugetPackageAttribute.#ctor(System.String,System.String)">
            <summary>
            Adds nuget package reference to script.
            </summary>
            <param name="packageId">Id of the nuget package. For Example "FlubuCore"</param>
            <param name="packageVersion">Version of the nuget package. For Example "3.0.0"</param>
        </member>
        <member name="T:FlubuCore.Scripting.Attributes.ReferenceAttribute">
            <summary>
            Loads System assemblies to script by fully qualified assembly name.
            </summary>
        </member>
        <member name="M:FlubuCore.Scripting.Attributes.ReferenceAttribute.#ctor(System.String)">
            <summary>
            Loads System assemblies to script by fully qualified assembly name.
            </summary>
            <param name="fullyQualifedAssemblyName">The fully qualifed assembly name.</param>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.MainCommands">
            <summary>
            The list of main commands (targets) to be executed.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.NoDependencies">
            <summary>
            If <c>true</c> no target dependencies are executed.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.TargetsToExecute">
            <summary>
            List of all targets(also dependencies) that must be executed. If they are not script execution fails.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.ExecuteTargetsInParallel">
            <summary>
            If <c>true</c> Target's provided in <see cref="P:FlubuCore.Scripting.BuildScriptArguments.MainCommands"/> are executed in parallel.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.ScriptArguments">
            <summary>
            Script Argument that can be accessed in build script through <see cref="P:FlubuCore.Context.IBuildPropertiesContext.ScriptArgs"/>
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.RethrowOnException">
            <summary>
            If <c>true</c> flubu rethrows exception when occures. Otherwise status code is returned.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.DryRun">
            <summary>
            Performs dry run.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.BuildScriptArguments.DisableInteractive">
            <summary>
            Disables Interactive mode for all task members where Interactive method is applied.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.Debug">
            <summary>
            If <c>true</c> dotnet-flubu cli tool and flubu.runner shows whole excetpion stacktrace. otherwise only message.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.DisableColoredLogging">
            <summary>
            If <c>true</c> colored logging is disabled.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.Script">
            <summary>
            Location where <see cref="T:FlubuCore.Scripting.BuildScriptLocator"/> searches for build script.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.AssemblyDirectories">
            <summary>
            Location's where <see cref="T:FlubuCore.Scripting.ScriptLoader"/> looks for assemblies to load.
            </summary>
        </member>
        <member name="P:FlubuCore.Services.FlubuEnviroment.SystemRootDir">
            <summary>
            Gets the Windows system root directory path.
            </summary>
            <value>The Windows system root directory path.</value>
        </member>
        <member name="T:FlubuCore.Services.IFlubuEnviromentService">
            <summary>
            An abstraction layer for various <see cref="!:FlubuEnvironment"/> utility methods.
            </summary>
        </member>
        <member name="M:FlubuCore.Services.IFlubuEnviromentService.ListAvailableMSBuildToolsVersions">
            <summary>
            Returns a sorted dictionary of all MSBuild tools versions that are available on the system.
            </summary>
            <remarks>The method scans through the registry (<c>HKLM\SOFTWARE\Microsoft\MSBuild\ToolsVersions</c> path)
            to find the available tools versions.</remarks>
            <returns>A sorted dictionary whose keys are tools versions (2.0, 3.5, 4.0, 12.0 etc.) and values are paths to the
            tools directories (and NOT the <c>MSBuild.exe</c> itself!). The entries are sorted ascendingly by version numbers.</returns>
        </member>
        <member name="P:FlubuCore.Targeting.ITargetInternal.IsHidden">
            <summary>
                Gets a value indicating whether this target is hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on and execute then Synchronus.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DependsOnAsync(System.String[])">
            <summary>
                Specifies targets on which this target depends on and execute dependencies asynchronus
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DependsOn(FlubuCore.Targeting.ITargetInternal[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DependsOnAsync(FlubuCore.Targeting.ITargetInternal[])">
            <summary>
                Specifies targets on which this target depends on and execute dependencies asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do(System.Action{FlubuCore.Context.ITaskContextInternal},System.Action{FlubuCore.Tasks.DoTask},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.Do``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync(System.Action{FlubuCore.Context.ITaskContextInternal},System.Action{FlubuCore.Tasks.DoTask},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0,System.Action{FlubuCore.Tasks.DoTask2{``0}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1,System.Action{FlubuCore.Tasks.DoTask3{``0,``1}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTask4{``0,``1,``2}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTask5{``0,``1,``2,``3}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTask6{``0,``1,``2,``3,``4}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync(System.Func{FlubuCore.Context.ITaskContextInternal,System.Threading.Tasks.Task},System.Action{FlubuCore.Tasks.DoTaskAsync},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``1(System.Func{FlubuCore.Context.ITaskContextInternal,``0,System.Threading.Tasks.Task},``0,System.Action{FlubuCore.Tasks.DoTaskAsync2{``0}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``2(System.Func{FlubuCore.Context.ITaskContextInternal,``0,``1,System.Threading.Tasks.Task},``0,``1,System.Action{FlubuCore.Tasks.DoTaskAsync3{``0,``1}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``3(System.Func{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2,System.Action{FlubuCore.Tasks.DoTaskAsync4{``0,``1,``2}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``4(System.Func{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,System.Threading.Tasks.Task},``0,``1,``2,``3,System.Action{FlubuCore.Tasks.DoTaskAsync5{``0,``1,``2,``3}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.DoAsync``5(System.Func{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``0,``1,``2,``3,``4,System.Action{FlubuCore.Tasks.DoTaskAsync6{``0,``1,``2,``3,``4}},FlubuCore.Targeting.TaskGroup)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.SetDescription(System.String)">
            <summary>
            Set's the description of the target.
            Desciption will be displayed in help.
            </summary>
            <param name="description">The description.</param>
            <returns>this target</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITargetInternal.AddTask(FlubuCore.Targeting.TaskGroup,FlubuCore.Tasks.ITask[])">
            <summary>
            Add's the task to the target.
            </summary>
            <param name="task">The task to be added</param>
        </member>
        <member name="P:FlubuCore.Targeting.Target.IsHidden">
            <summary>
                Gets a value indicating whether this target is hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOnAsync(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetDescription(System.String)">
            <summary>
                Set's the description of the target,
            </summary>
            <param name="description">The description</param>
            <returns>this target</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOn(FlubuCore.Targeting.ITargetInternal[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency targets</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITargetInternal" /></returns>
        </member>
        <member name="M:FlubuCore.Targeting.TargetCreator.CreateTargetFromMethodAttributes(FlubuCore.Scripting.IBuildScript,FlubuCore.Context.ITaskSession)">
            <summary>
            Searches methods with Target attribute in specified type and creates targets.
            </summary>
            <param name="buildScriptType"></param>
            <param name="taskSession"></param>
        </member>
        <member name="P:FlubuCore.Targeting.TargetTree.DefaultTargets">
            <summary>
                Gets the default target for this runner.
            </summary>
            <remarks>
                The default target is the one which will be executed if
                the target is not specified in the command line.
            </remarks>
            <value>The default target.</value>
        </member>
        <member name="M:FlubuCore.Targeting.TargetTree.HasAllTargets(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String}@)">
            <summary>
                Determines whether the specified targets exists.
            </summary>
            <param name="targetNames">Name of the target.</param>
            <returns>
                <c>true</c> if the specified target exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlubuCore.Targeting.TargetTree.HasTarget(System.String)">
            <summary>
                Determines whether the specified target exists.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns>
                <c>true</c> if the specified target exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlubuCore.Targeting.TargetTree.LogTargetsHelp(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                The target for displaying help in the command line.
            </summary>
            <param name="context">The task context.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Checkpoint.DockerCheckpointCreateTask.CheckpointDir(System.String)">
            <summary>
            Use a custom checkpoint storage directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Checkpoint.DockerCheckpointCreateTask.LeaveRunning">
            <summary>
            Leave the container running after checkpoint
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Checkpoint.DockerCheckpointLsTask.CheckpointDir(System.String)">
            <summary>
            Use a custom checkpoint storage directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Checkpoint.DockerCheckpointRmTask.CheckpointDir(System.String)">
            <summary>
            Use a custom checkpoint storage directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigCreateTask.Label(System.String)">
            <summary>
            Config labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigCreateTask.TemplateDriver(System.String)">
            <summary>
            Template driver
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigInspectTask.Pretty">
            <summary>
            Print the information in a human friendly format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigLsTask.Format(System.String)">
            <summary>
            Pretty-print configs using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Config.DockerConfigLsTask.Quiet">
            <summary>
            Only display IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerAttachTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerAttachTask.NoStdin">
            <summary>
            Do not attach STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerAttachTask.SigProxy">
            <summary>
            Proxy all received signals to the process
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCommitTask.Author(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCommitTask.Change(System.String)">
            <summary>
            Apply Dockerfile instruction to the created image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCommitTask.Message(System.String)">
            <summary>
            Commit message
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCommitTask.Pause">
            <summary>
            Pause container during commit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Attach(System.String)">
            <summary>
            Attach to STDIN, STDOUT or STDERR
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.BlkioWeightDevice(System.String)">
            <summary>
            Block IO weight (relative device weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CapAdd(System.String)">
            <summary>
            Add Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CapDrop(System.String)">
            <summary>
            Drop Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Cidfile(System.String)">
            <summary>
            Write the container ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuCount(System.Int64)">
            <summary>
            CPU count (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuPercent(System.Int64)">
            <summary>
            CPU percent (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Device(System.String)">
            <summary>
            Add a host device to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DeviceCgroupRule(System.String)">
            <summary>
            Add a rule to the cgroup allowed devices list
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DeviceReadBps(System.String)">
            <summary>
            Limit read rate (bytes per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DeviceReadIops(System.String)">
            <summary>
            Limit read rate (IO per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DeviceWriteBps(System.String)">
            <summary>
            Limit write rate (bytes per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DeviceWriteIops(System.String)">
            <summary>
            Limit write rate (IO per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Dns(System.String)">
            <summary>
            Set custom DNS servers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DnsOpt(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DnsOption(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.DnsSearch(System.String)">
            <summary>
            Set custom DNS search domains
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.EnvFile(System.String)">
            <summary>
            Read in a file of environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Expose(System.String)">
            <summary>
            Expose a port or a range of ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.GroupAdd(System.String)">
            <summary>
            Add additional groups to join
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h) (default 0s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.HealthStartPeriod(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.HealthTimeout(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Help">
            <summary>
            Print usage
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Hostname(System.String)">
            <summary>
            Container host name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Init" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.IoMaxbandwidth(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.IoMaxiops(System.UInt64)">
            <summary>
            Maximum IOps limit for the system drive (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Ip(System.String)">
            <summary>
            IPv4 address (e.g., 172.30.100.104)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Ip6(System.String)">
            <summary>
            IPv6 address (e.g., 2001:db8::33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Ipc(System.String)">
            <summary>
            IPC mode to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Label(System.String)">
            <summary>
            Set meta data on a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.LabelFile(System.String)">
            <summary>
            Read in a line delimited file of labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Link(System.String)">
            <summary>
            Add link to another container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.LinkLocalIp(System.String)">
            <summary>
            Container IPv4/IPv6 link-local addresses
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.LogDriver(System.String)">
            <summary>
            Logging driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.LogOpt(System.String)">
            <summary>
            Log driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.MacAddress(System.String)">
            <summary>
            Container MAC address (e.g., 92:d0:c6:0a:29:33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.MemorySwappiness(System.Int64)">
            <summary>
            Tune container memory swappiness (0 to 100)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Mount(System.String)">
            <summary>
            Attach a filesystem mount to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Name(System.String)">
            <summary>
            Assign a name to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Net(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.NetAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Network(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.NetworkAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.OomKillDisable">
            <summary>
            Disable OOM Killer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.OomScoreAdj(System.Int32)">
            <summary>
            Tune host's OOM preferences (-1000 to 1000)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Pid(System.String)">
            <summary>
            PID namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.PidsLimit(System.Int64)">
            <summary>
            Tune container pids limit (set -1 for unlimited)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Privileged">
            <summary>
            Give extended privileges to this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Publish(System.String)">
            <summary>
            Publish a container's port(s) to the host
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.PublishAll">
            <summary>
            Publish all exposed ports to random ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Rm">
            <summary>
            Automatically remove the container when it exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Runtime(System.String)">
            <summary>
            Runtime to use for this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.SecurityOpt(System.String)">
            <summary>
            Security Options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.StopSignal(System.String)">
            <summary>
            Signal to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.StopTimeout(System.Int32)">
            <summary>
            Timeout (in seconds) to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.StorageOpt(System.String)">
            <summary>
            Storage driver options for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Sysctl(System.String)">
            <summary>
            Sysctl options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Tmpfs(System.String)">
            <summary>
            Mount a tmpfs directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Userns(System.String)">
            <summary>
            User namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Uts(System.String)">
            <summary>
            UTS namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Volume(System.String)">
            <summary>
            Bind mount a volume
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.VolumeDriver(System.String)">
            <summary>
            Optional volume driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.VolumesFrom(System.String)">
            <summary>
            Mount volumes from the specified container(s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerCreateTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Detach">
            <summary>
            Detached mode: run command in the background
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Privileged">
            <summary>
            Give extended privileges to the command
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExecTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerExportTask.Output(System.String)">
            <summary>
            Write to a file, instead of STDOUT
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerInspectTask.Size">
            <summary>
            Display total file sizes
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerKillTask.Signal(System.String)">
            <summary>
            Signal to send to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Details">
            <summary>
            Show extra details provided to logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Follow">
            <summary>
            Follow log output
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Since(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Tail(System.String)">
            <summary>
            Number of lines to show from the end of the logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Timestamps">
            <summary>
            Show timestamps
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerLogsTask.Until(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.All">
            <summary>
            Show all containers (default shows just running)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Format(System.String)">
            <summary>
            Pretty-print containers using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Last(System.Int32)">
            <summary>
            Show n last created containers (includes all states)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Latest">
            <summary>
            Show the latest created container (includes all states)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Quiet">
            <summary>
            Only display numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerLsTask.Size">
            <summary>
            Display total file sizes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerPruneTask.Filter(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerPruneTask.Force">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRestartTask.Time(System.Int32)">
            <summary>
            Seconds to wait for stop before killing the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRmTask.Force">
            <summary>
            Force the removal of a running container (uses SIGKILL)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRmTask.Link">
            <summary>
            Remove the specified link
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRmTask.Volumes">
            <summary>
            Remove the volumes associated with the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Attach(System.String)">
            <summary>
            Attach to STDIN, STDOUT or STDERR
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.BlkioWeightDevice(System.String)">
            <summary>
            Block IO weight (relative device weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CapAdd(System.String)">
            <summary>
            Add Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CapDrop(System.String)">
            <summary>
            Drop Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Cidfile(System.String)">
            <summary>
            Write the container ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuCount(System.Int64)">
            <summary>
            CPU count (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuPercent(System.Int64)">
            <summary>
            CPU percent (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Detach">
            <summary>
            Run container in background and print container ID
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Device(System.String)">
            <summary>
            Add a host device to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DeviceCgroupRule(System.String)">
            <summary>
            Add a rule to the cgroup allowed devices list
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DeviceReadBps(System.String)">
            <summary>
            Limit read rate (bytes per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DeviceReadIops(System.String)">
            <summary>
            Limit read rate (IO per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DeviceWriteBps(System.String)">
            <summary>
            Limit write rate (bytes per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DeviceWriteIops(System.String)">
            <summary>
            Limit write rate (IO per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Dns(System.String)">
            <summary>
            Set custom DNS servers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DnsOpt(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DnsOption(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.DnsSearch(System.String)">
            <summary>
            Set custom DNS search domains
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.EnvFile(System.String)">
            <summary>
            Read in a file of environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Expose(System.String)">
            <summary>
            Expose a port or a range of ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.GroupAdd(System.String)">
            <summary>
            Add additional groups to join
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h) (default 0s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.HealthStartPeriod(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.HealthTimeout(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Help">
            <summary>
            Print usage
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Hostname(System.String)">
            <summary>
            Container host name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Init" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.IoMaxbandwidth(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.IoMaxiops(System.UInt64)">
            <summary>
            Maximum IOps limit for the system drive (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Ip(System.String)">
            <summary>
            IPv4 address (e.g., 172.30.100.104)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Ip6(System.String)">
            <summary>
            IPv6 address (e.g., 2001:db8::33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Ipc(System.String)">
            <summary>
            IPC mode to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Label(System.String)">
            <summary>
            Set meta data on a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.LabelFile(System.String)">
            <summary>
            Read in a line delimited file of labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Link(System.String)">
            <summary>
            Add link to another container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.LinkLocalIp(System.String)">
            <summary>
            Container IPv4/IPv6 link-local addresses
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.LogDriver(System.String)">
            <summary>
            Logging driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.LogOpt(System.String)">
            <summary>
            Log driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.MacAddress(System.String)">
            <summary>
            Container MAC address (e.g., 92:d0:c6:0a:29:33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.MemorySwappiness(System.Int64)">
            <summary>
            Tune container memory swappiness (0 to 100)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Mount(System.String)">
            <summary>
            Attach a filesystem mount to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Name(System.String)">
            <summary>
            Assign a name to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Net(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.NetAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Network(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.NetworkAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.OomKillDisable">
            <summary>
            Disable OOM Killer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.OomScoreAdj(System.Int32)">
            <summary>
            Tune host's OOM preferences (-1000 to 1000)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Pid(System.String)">
            <summary>
            PID namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.PidsLimit(System.Int64)">
            <summary>
            Tune container pids limit (set -1 for unlimited)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Privileged">
            <summary>
            Give extended privileges to this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Publish(System.String)">
            <summary>
            Publish a container's port(s) to the host
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.PublishAll">
            <summary>
            Publish all exposed ports to random ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Rm">
            <summary>
            Automatically remove the container when it exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Runtime(System.String)">
            <summary>
            Runtime to use for this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.SecurityOpt(System.String)">
            <summary>
            Security Options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.SigProxy">
            <summary>
            Proxy received signals to the process
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.StopSignal(System.String)">
            <summary>
            Signal to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.StopTimeout(System.Int32)">
            <summary>
            Timeout (in seconds) to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.StorageOpt(System.String)">
            <summary>
            Storage driver options for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Sysctl(System.String)">
            <summary>
            Sysctl options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Tmpfs(System.String)">
            <summary>
            Mount a tmpfs directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Userns(System.String)">
            <summary>
            User namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Uts(System.String)">
            <summary>
            UTS namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Volume(System.String)">
            <summary>
            Bind mount a volume
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.VolumeDriver(System.String)">
            <summary>
            Optional volume driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.VolumesFrom(System.String)">
            <summary>
            Mount volumes from the specified container(s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerRunTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStartTask.Attach">
            <summary>
            Attach STDOUT/STDERR and forward signals
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStartTask.Checkpoint(System.String)">
            <summary>
            Restore from this checkpoint
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStartTask.CheckpointDir(System.String)">
            <summary>
            Use a custom checkpoint storage directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStartTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStartTask.Interactive">
            <summary>
            Attach container's STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStatsTask.All">
            <summary>
            Show all containers (default shows just running)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStatsTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStatsTask.NoStream">
            <summary>
            Disable streaming stats and only pull the first result
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStatsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerStopTask.Time(System.Int32)">
            <summary>
            Seconds to wait for stop before killing it
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit the CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit the CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Container.DockerContainerUpdateTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerAttachTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerAttachTask.NoStdin">
            <summary>
            Do not attach STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerAttachTask.SigProxy">
            <summary>
            Proxy all received signals to the process
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.BuildArg(System.String)">
            <summary>
            Set build-time variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CacheFrom(System.String)">
            <summary>
            Images to consider as cache sources
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Compress">
            <summary>
            Compress the build context using gzip
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CpuPeriod(System.Int64)">
            <summary>
            Limit the CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CpuQuota(System.Int64)">
            <summary>
            Limit the CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.File(System.String)">
            <summary>
            Name of the Dockerfile (Default is 'PATH/Dockerfile')
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.ForceRm">
            <summary>
            Always remove intermediate containers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Iidfile(System.String)">
            <summary>
            Write the image ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Label(System.String)">
            <summary>
            Set metadata for an image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerBuildTask.MemorySwap(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerBuildTask.Network(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.NoCache">
            <summary>
            Do not use cache when building the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Pull">
            <summary>
            Always attempt to pull a newer version of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Quiet">
            <summary>
            Suppress the build output and print image ID on success
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Rm">
            <summary>
            Remove intermediate containers after a successful build
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.SecurityOpt(System.String)">
            <summary>
            Security options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Squash">
            <summary>
            Squash newly built layers into a single new layer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Stream">
            <summary>
            Stream attaches to server to negotiate build context
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Tag(System.String)">
            <summary>
            Name and optionally a tag in the 'name:tag' format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Target(System.String)">
            <summary>
            Set the target build stage to build.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerBuildTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCommitTask.Author(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCommitTask.Change(System.String)">
            <summary>
            Apply Dockerfile instruction to the created image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCommitTask.Message(System.String)">
            <summary>
            Commit message
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCommitTask.Pause">
            <summary>
            Pause container during commit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Attach(System.String)">
            <summary>
            Attach to STDIN, STDOUT or STDERR
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.BlkioWeightDevice(System.String)">
            <summary>
            Block IO weight (relative device weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CapAdd(System.String)">
            <summary>
            Add Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CapDrop(System.String)">
            <summary>
            Drop Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Cidfile(System.String)">
            <summary>
            Write the container ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuCount(System.Int64)">
            <summary>
            CPU count (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuPercent(System.Int64)">
            <summary>
            CPU percent (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Device(System.String)">
            <summary>
            Add a host device to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DeviceCgroupRule(System.String)">
            <summary>
            Add a rule to the cgroup allowed devices list
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DeviceReadBps(System.String)">
            <summary>
            Limit read rate (bytes per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DeviceReadIops(System.String)">
            <summary>
            Limit read rate (IO per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DeviceWriteBps(System.String)">
            <summary>
            Limit write rate (bytes per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DeviceWriteIops(System.String)">
            <summary>
            Limit write rate (IO per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Dns(System.String)">
            <summary>
            Set custom DNS servers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DnsOpt(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DnsOption(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.DnsSearch(System.String)">
            <summary>
            Set custom DNS search domains
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.EnvFile(System.String)">
            <summary>
            Read in a file of environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Expose(System.String)">
            <summary>
            Expose a port or a range of ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.GroupAdd(System.String)">
            <summary>
            Add additional groups to join
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h) (default 0s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.HealthStartPeriod(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.HealthTimeout(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Help">
            <summary>
            Print usage
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Hostname(System.String)">
            <summary>
            Container host name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.Init" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.IoMaxbandwidth(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.IoMaxiops(System.UInt64)">
            <summary>
            Maximum IOps limit for the system drive (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Ip(System.String)">
            <summary>
            IPv4 address (e.g., 172.30.100.104)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Ip6(System.String)">
            <summary>
            IPv6 address (e.g., 2001:db8::33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Ipc(System.String)">
            <summary>
            IPC mode to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Label(System.String)">
            <summary>
            Set meta data on a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.LabelFile(System.String)">
            <summary>
            Read in a line delimited file of labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Link(System.String)">
            <summary>
            Add link to another container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.LinkLocalIp(System.String)">
            <summary>
            Container IPv4/IPv6 link-local addresses
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.LogDriver(System.String)">
            <summary>
            Logging driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.LogOpt(System.String)">
            <summary>
            Log driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.MacAddress(System.String)">
            <summary>
            Container MAC address (e.g., 92:d0:c6:0a:29:33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.MemorySwappiness(System.Int64)">
            <summary>
            Tune container memory swappiness (0 to 100)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Mount(System.String)">
            <summary>
            Attach a filesystem mount to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Name(System.String)">
            <summary>
            Assign a name to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Net(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.NetAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Network(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.NetworkAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.OomKillDisable">
            <summary>
            Disable OOM Killer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.OomScoreAdj(System.Int32)">
            <summary>
            Tune host's OOM preferences (-1000 to 1000)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Pid(System.String)">
            <summary>
            PID namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.PidsLimit(System.Int64)">
            <summary>
            Tune container pids limit (set -1 for unlimited)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Privileged">
            <summary>
            Give extended privileges to this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Publish(System.String)">
            <summary>
            Publish a container's port(s) to the host
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.PublishAll">
            <summary>
            Publish all exposed ports to random ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Rm">
            <summary>
            Automatically remove the container when it exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Runtime(System.String)">
            <summary>
            Runtime to use for this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.SecurityOpt(System.String)">
            <summary>
            Security Options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.StopSignal(System.String)">
            <summary>
            Signal to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.StopTimeout(System.Int32)">
            <summary>
            Timeout (in seconds) to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.StorageOpt(System.String)">
            <summary>
            Storage driver options for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Sysctl(System.String)">
            <summary>
            Sysctl options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Tmpfs(System.String)">
            <summary>
            Mount a tmpfs directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerCreateTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Userns(System.String)">
            <summary>
            User namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Uts(System.String)">
            <summary>
            UTS namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Volume(System.String)">
            <summary>
            Bind mount a volume
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.VolumeDriver(System.String)">
            <summary>
            Optional volume driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.VolumesFrom(System.String)">
            <summary>
            Mount volumes from the specified container(s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerCreateTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerDeployTask.BundleFile(System.String)">
            <summary>
            Path to a Distributed Application Bundle file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerDeployTask.ComposeFile(System.String)">
            <summary>
            Path to a Compose file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerDeployTask.Prune">
            <summary>
            Prune services that are no longer referenced
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerDeployTask.ResolveImage(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerDeployTask.WithRegistryAuth">
            <summary>
            Send registry authentication details to Swarm agents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerEventsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerEventsTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerEventsTask.Since(System.String)">
            <summary>
            Show all events created since timestamp
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerEventsTask.Until(System.String)">
            <summary>
            Stream events until this timestamp
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Detach">
            <summary>
            Detached mode: run command in the background
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Privileged">
            <summary>
            Give extended privileges to the command
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerExecTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerExecTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerExportTask.Output(System.String)">
            <summary>
            Write to a file, instead of STDOUT
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerHistoryTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerHistoryTask.Human">
            <summary>
            Print sizes and dates in human readable format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerHistoryTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerHistoryTask.Quiet">
            <summary>
            Only show numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.All">
            <summary>
            Show all images (default hides intermediate images)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.Digests">
            <summary>
            Show digests
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImagesTask.Quiet">
            <summary>
            Only show numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImportTask.Change(System.String)">
            <summary>
            Apply Dockerfile instruction to the created image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerImportTask.Message(System.String)">
            <summary>
            Set commit message for imported image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerInfoTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerInspectTask.Size">
            <summary>
            Display total file sizes if the type is container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerInspectTask.Type(System.String)">
            <summary>
            Return JSON for specified type
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerKillTask.Signal(System.String)">
            <summary>
            Signal to send to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLoadTask.Input(System.String)">
            <summary>
            Read from tar archive file, instead of STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLoadTask.Quiet">
            <summary>
            Suppress the load output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLoginTask.Password(System.String)">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLoginTask.PasswordStdin">
            <summary>
            Take the password from stdin
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLoginTask.Username(System.String)">
            <summary>
            Username
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLogsTask.Details">
            <summary>
            Show extra details provided to logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLogsTask.Follow">
            <summary>
            Follow log output
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerLogsTask.Since(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerLogsTask.Tail(System.String)">
            <summary>
            Number of lines to show from the end of the logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerLogsTask.Timestamps">
            <summary>
            Show timestamps
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerLogsTask.Until(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.All">
            <summary>
            Show all containers (default shows just running)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Format(System.String)">
            <summary>
            Pretty-print containers using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Last(System.Int32)">
            <summary>
            Show n last created containers (includes all states)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Latest">
            <summary>
            Show the latest created container (includes all states)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Quiet">
            <summary>
            Only display numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPsTask.Size">
            <summary>
            Display total file sizes
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPullTask.AllTags">
            <summary>
            Download all tagged images in the repository
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPullTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPullTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerPushTask.DisableContentTrust">
            <summary>
            Skip image signing
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRemoveContainerTask.Force">
            <summary>
            --force, -f
            Force the removal of a running container (uses SIGKILL)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRemoveContainerTask.RemoveLink">
            <summary>
            --link, -l
            default: false
            Remove the specified link
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRemoveContainerTask.RemoveVolumes">
            <summary>
            --volumes, -v
            default: false
            Remove the volumes associated with the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRemoveImageTask.Force">
            <summary>
            --force, -f
            Force removal of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRemoveImageTask.NoPrune">
            <summary>
            --no-prune
            Do not delete untagged parents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRestartTask.Time(System.Int32)">
            <summary>
            Seconds to wait for stop before killing the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRmiTask.Force">
            <summary>
            Force removal of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRmiTask.NoPrune">
            <summary>
            Do not delete untagged parents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRmTask.Force">
            <summary>
            Force the removal of a running container (uses SIGKILL)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRmTask.Link">
            <summary>
            Remove the specified link
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRmTask.Volumes">
            <summary>
            Remove the volumes associated with the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Attach(System.String)">
            <summary>
            Attach to STDIN, STDOUT or STDERR
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.BlkioWeightDevice(System.String)">
            <summary>
            Block IO weight (relative device weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CapAdd(System.String)">
            <summary>
            Add Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CapDrop(System.String)">
            <summary>
            Drop Linux capabilities
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Cidfile(System.String)">
            <summary>
            Write the container ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuCount(System.Int64)">
            <summary>
            CPU count (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuPercent(System.Int64)">
            <summary>
            CPU percent (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Detach">
            <summary>
            Run container in background and print container ID
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Device(System.String)">
            <summary>
            Add a host device to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DeviceCgroupRule(System.String)">
            <summary>
            Add a rule to the cgroup allowed devices list
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DeviceReadBps(System.String)">
            <summary>
            Limit read rate (bytes per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DeviceReadIops(System.String)">
            <summary>
            Limit read rate (IO per second) from a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DeviceWriteBps(System.String)">
            <summary>
            Limit write rate (bytes per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DeviceWriteIops(System.String)">
            <summary>
            Limit write rate (IO per second) to a device
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Dns(System.String)">
            <summary>
            Set custom DNS servers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DnsOpt(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DnsOption(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.DnsSearch(System.String)">
            <summary>
            Set custom DNS search domains
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.EnvFile(System.String)">
            <summary>
            Read in a file of environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Expose(System.String)">
            <summary>
            Expose a port or a range of ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.GroupAdd(System.String)">
            <summary>
            Add additional groups to join
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h) (default 0s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.HealthStartPeriod(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.HealthTimeout(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Help">
            <summary>
            Print usage
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Hostname(System.String)">
            <summary>
            Container host name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.Init" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Interactive">
            <summary>
            Keep STDIN open even if not attached
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.IoMaxbandwidth(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.IoMaxiops(System.UInt64)">
            <summary>
            Maximum IOps limit for the system drive (Windows only)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Ip(System.String)">
            <summary>
            IPv4 address (e.g., 172.30.100.104)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Ip6(System.String)">
            <summary>
            IPv6 address (e.g., 2001:db8::33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Ipc(System.String)">
            <summary>
            IPC mode to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Label(System.String)">
            <summary>
            Set meta data on a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.LabelFile(System.String)">
            <summary>
            Read in a line delimited file of labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Link(System.String)">
            <summary>
            Add link to another container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.LinkLocalIp(System.String)">
            <summary>
            Container IPv4/IPv6 link-local addresses
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.LogDriver(System.String)">
            <summary>
            Logging driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.LogOpt(System.String)">
            <summary>
            Log driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.MacAddress(System.String)">
            <summary>
            Container MAC address (e.g., 92:d0:c6:0a:29:33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.MemorySwappiness(System.Int64)">
            <summary>
            Tune container memory swappiness (0 to 100)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Mount(System.String)">
            <summary>
            Attach a filesystem mount to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Name(System.String)">
            <summary>
            Assign a name to the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Net(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.NetAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Network(System.String)">
            <summary>
            Connect a container to a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.NetworkAlias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.OomKillDisable">
            <summary>
            Disable OOM Killer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.OomScoreAdj(System.Int32)">
            <summary>
            Tune host's OOM preferences (-1000 to 1000)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Pid(System.String)">
            <summary>
            PID namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.PidsLimit(System.Int64)">
            <summary>
            Tune container pids limit (set -1 for unlimited)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Privileged">
            <summary>
            Give extended privileges to this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Publish(System.String)">
            <summary>
            Publish a container's port(s) to the host
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.PublishAll">
            <summary>
            Publish all exposed ports to random ports
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Rm">
            <summary>
            Automatically remove the container when it exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Runtime(System.String)">
            <summary>
            Runtime to use for this container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.SecurityOpt(System.String)">
            <summary>
            Security Options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.SigProxy">
            <summary>
            Proxy received signals to the process
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.StopSignal(System.String)">
            <summary>
            Signal to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.StopTimeout(System.Int32)">
            <summary>
            Timeout (in seconds) to stop a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.StorageOpt(System.String)">
            <summary>
            Storage driver options for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Sysctl(System.String)">
            <summary>
            Sysctl options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Tmpfs(System.String)">
            <summary>
            Mount a tmpfs directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerRunTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Userns(System.String)">
            <summary>
            User namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Uts(System.String)">
            <summary>
            UTS namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Volume(System.String)">
            <summary>
            Bind mount a volume
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.VolumeDriver(System.String)">
            <summary>
            Optional volume driver for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.VolumesFrom(System.String)">
            <summary>
            Mount volumes from the specified container(s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerRunTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSaveTask.Output(System.String)">
            <summary>
            Write to a file, instead of STDOUT
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.Automated">
            <summary>
            Only show automated builds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.Format(System.String)">
            <summary>
            Pretty-print search using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.Limit(System.Int32)">
            <summary>
            Max number of search results
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerSearchTask.Stars(System.UInt32)">
            <summary>
            Only displays with at least x stars
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStackTask.Kubeconfig(System.String)">
            <summary>
            Kubernetes config file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStackTask.Namespace(System.String)">
            <summary>
            Kubernetes namespace to use
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStartTask.Attach">
            <summary>
            Attach STDOUT/STDERR and forward signals
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStartTask.Checkpoint(System.String)">
            <summary>
            Restore from this checkpoint
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStartTask.CheckpointDir(System.String)">
            <summary>
            Use a custom checkpoint storage directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStartTask.DetachKeys(System.String)">
            <summary>
            Override the key sequence for detaching a container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStartTask.Interactive">
            <summary>
            Attach container's STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStatsTask.All">
            <summary>
            Show all containers (default shows just running)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStatsTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStatsTask.NoStream">
            <summary>
            Disable streaming stats and only pull the first result
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStatsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerStopTask.Time(System.Int32)">
            <summary>
            Seconds to wait for stop before killing it
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerUpdateTask.BlkioWeight(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpuPeriod(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpuQuota(System.Int64)">
            <summary>
            Limit CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpuRtPeriod(System.Int64)">
            <summary>
            Limit the CPU real-time period in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpuRtRuntime(System.Int64)">
            <summary>
            Limit the CPU real-time runtime in microseconds
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.Cpus(System.Decimal)">
            <summary>
            Number of CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.KernelMemory(System.String)">
            <summary>
            Kernel memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.MemoryReservation(System.String)">
            <summary>
            Memory soft limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.DockerUpdateTask.MemorySwap(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.DockerUpdateTask.Restart(System.String)">
            <summary>
            Restart policy to apply when a container exits
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.DockerVersionTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.AddHost(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.BuildArg(System.String)">
            <summary>
            Set build-time variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CacheFrom(System.String)">
            <summary>
            Images to consider as cache sources
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CgroupParent(System.String)">
            <summary>
            Optional parent cgroup for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Compress">
            <summary>
            Compress the build context using gzip
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CpuPeriod(System.Int64)">
            <summary>
            Limit the CPU CFS (Completely Fair Scheduler) period
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CpuQuota(System.Int64)">
            <summary>
            Limit the CPU CFS (Completely Fair Scheduler) quota
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CpuShares(System.Int64)">
            <summary>
            CPU shares (relative weight)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CpusetCpus(System.String)">
            <summary>
            CPUs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.CpusetMems(System.String)">
            <summary>
            MEMs in which to allow execution (0-3, 0,1)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.File(System.String)">
            <summary>
            Name of the Dockerfile (Default is 'PATH/Dockerfile')
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.ForceRm">
            <summary>
            Always remove intermediate containers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Iidfile(System.String)">
            <summary>
            Write the image ID to the file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Isolation(System.String)">
            <summary>
            Container isolation technology
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Label(System.String)">
            <summary>
            Set metadata for an image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Memory(System.String)">
            <summary>
            Memory limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.MemorySwap(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Network(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.NoCache">
            <summary>
            Do not use cache when building the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Pull">
            <summary>
            Always attempt to pull a newer version of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Quiet">
            <summary>
            Suppress the build output and print image ID on success
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Rm">
            <summary>
            Remove intermediate containers after a successful build
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.SecurityOpt(System.String)">
            <summary>
            Security options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.ShmSize(System.String)">
            <summary>
            Size of /dev/shm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Squash">
            <summary>
            Squash newly built layers into a single new layer
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Stream">
            <summary>
            Stream attaches to server to negotiate build context
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Tag(System.String)">
            <summary>
            Name and optionally a tag in the 'name:tag' format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Target(System.String)">
            <summary>
            Set the target build stage to build.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageBuildTask.Ulimit(System.String)">
            <summary>
            Ulimit options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageHistoryTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageHistoryTask.Human">
            <summary>
            Print sizes and dates in human readable format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageHistoryTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageHistoryTask.Quiet">
            <summary>
            Only show numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageImportTask.Change(System.String)">
            <summary>
            Apply Dockerfile instruction to the created image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageImportTask.Message(System.String)">
            <summary>
            Set commit message for imported image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLoadTask.Input(System.String)">
            <summary>
            Read from tar archive file, instead of STDIN
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLoadTask.Quiet">
            <summary>
            Suppress the load output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.All">
            <summary>
            Show all images (default hides intermediate images)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.Digests">
            <summary>
            Show digests
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageLsTask.Quiet">
            <summary>
            Only show numeric IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePruneTask.All">
            <summary>
            Remove all unused images, not just dangling ones
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Image.DockerImagePruneTask.Filter(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePruneTask.Force">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePullTask.AllTags">
            <summary>
            Download all tagged images in the repository
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePullTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePullTask.Platform(System.String)">
            <summary>
            Set platform if server is multi-platform capable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImagePushTask.DisableContentTrust">
            <summary>
            Skip image signing
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageRmTask.Force">
            <summary>
            Force removal of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageRmTask.NoPrune">
            <summary>
            Do not delete untagged parents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Image.DockerImageSaveTask.Output(System.String)">
            <summary>
            Write to a file, instead of STDOUT
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestAnnotateTask.Arch(System.String)">
            <summary>
            Set architecture
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestAnnotateTask.Os(System.String)">
            <summary>
            Set operating system
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestAnnotateTask.OsFeatures(System.String)">
            <summary>
            Set operating system feature
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestAnnotateTask.Variant(System.String)">
            <summary>
            Set architecture variant
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestCreateTask.Amend">
            <summary>
            Amend an existing manifest list
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestCreateTask.Insecure">
            <summary>
            allow communication with an insecure registry
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestInspectTask.Insecure">
            <summary>
            allow communication with an insecure registry
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestInspectTask.Verbose">
            <summary>
            Output additional info including layers and platform
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestPushTask.Insecure">
            <summary>
            Allow push to an insecure registry
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Manifest.DockerManifestPushTask.Purge">
            <summary>
            Remove the local manifest list after push
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkConnectTask.Alias(System.String)">
            <summary>
            Add network-scoped alias for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkConnectTask.Ip(System.String)">
            <summary>
            IPv4 address (e.g., 172.30.100.104)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkConnectTask.Ip6(System.String)">
            <summary>
            IPv6 address (e.g., 2001:db8::33)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkConnectTask.Link(System.String)">
            <summary>
            Add link to another container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkConnectTask.LinkLocalIp(System.String)">
            <summary>
            Add a link-local address for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Attachable">
            <summary>
            Enable manual container attachment
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.AuxAddress(System.String)">
            <summary>
            Auxiliary IPv4 or IPv6 addresses used by Network driver
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.ConfigFrom(System.String)">
            <summary>
            The network from which copying the configuration
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.ConfigOnly">
            <summary>
            Create a configuration only network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Driver(System.String)">
            <summary>
            Driver to manage the Network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Gateway(System.String)">
            <summary>
            IPv4 or IPv6 Gateway for the master subnet
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Ingress">
            <summary>
            Create swarm routing-mesh network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Internal">
            <summary>
            Restrict external access to the network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.IpRange(System.String)">
            <summary>
            Allocate container ip from a sub-range
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.IpamDriver(System.String)">
            <summary>
            IP Address Management Driver
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.IpamOpt(System.String)">
            <summary>
            Set IPAM driver specific options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Ipv6">
            <summary>
            Enable IPv6 networking
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Label(System.String)">
            <summary>
            Set metadata on a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Opt(System.String)">
            <summary>
            Set driver specific options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Scope(System.String)">
            <summary>
            Control the network's scope
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkCreateTask.Subnet(System.String)">
            <summary>
            Subnet in CIDR format that represents a network segment
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkDisconnectTask.Force">
            <summary>
            Force the container to disconnect from a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkInspectTask.Verbose">
            <summary>
            Verbose output for diagnostics
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkLsTask.Filter(System.String)">
            <summary>
            Provide filter values (e.g. 'driver=bridge')
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkLsTask.Format(System.String)">
            <summary>
            Pretty-print networks using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkLsTask.NoTrunc">
            <summary>
            Do not truncate the output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkLsTask.Quiet">
            <summary>
            Only display network IDs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Network.DockerNetworkPruneTask.Filter(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Network.DockerNetworkPruneTask.Force">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeInspectTask.Pretty">
            <summary>
            Print the information in a human friendly format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeLsTask.Format(System.String)">
            <summary>
            Pretty-print nodes using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeLsTask.Quiet">
            <summary>
            Only display IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodePsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodePsTask.Format(System.String)">
            <summary>
            Pretty-print tasks using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodePsTask.NoResolve">
            <summary>
            Do not map IDs to Names
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodePsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodePsTask.Quiet">
            <summary>
            Only display task IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeRmTask.Force">
            <summary>
            Force remove a node from the swarm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeUpdateTask.Availability(System.String)">
            <summary>
            Availability of the node ("active"|"pause"|"drain")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeUpdateTask.LabelAdd(System.String)">
            <summary>
            Add or update a node label (key=value)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeUpdateTask.LabelRm(System.String)">
            <summary>
            Remove a node label if exists
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Node.DockerNodeUpdateTask.Role(System.String)">
            <summary>
            Role of the node ("worker"|"manager")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginCreateTask.Compress">
            <summary>
            Compress the context using gzip
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginDisableTask.Force">
            <summary>
            Force the disable of an active plugin
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginEnableTask.Timeout(System.Int32)">
            <summary>
            HTTP client timeout (in seconds)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginInstallTask.Alias(System.String)">
            <summary>
            Local name for plugin
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginInstallTask.Disable">
            <summary>
            Do not enable the plugin on install
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginInstallTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginInstallTask.GrantAllPermissions">
            <summary>
            Grant all permissions necessary to run the plugin
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginLsTask.Filter(System.String)">
            <summary>
            Provide filter values (e.g. 'enabled=true')
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginLsTask.Format(System.String)">
            <summary>
            Pretty-print plugins using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginLsTask.NoTrunc">
            <summary>
            Don't truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginLsTask.Quiet">
            <summary>
            Only display plugin IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginPushTask.DisableContentTrust">
            <summary>
            Skip image signing
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginRmTask.Force">
            <summary>
            Force the removal of an active plugin
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginUpgradeTask.DisableContentTrust">
            <summary>
            Skip image verification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Plugin.DockerPluginUpgradeTask.GrantAllPermissions">
            <summary>
            Grant all permissions necessary to run the plugin
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Plugin.DockerPluginUpgradeTask.SkipRemoteCheck" -->
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretCreateTask.Driver(System.String)">
            <summary>
            Secret driver
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretCreateTask.Label(System.String)">
            <summary>
            Secret labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretCreateTask.TemplateDriver(System.String)">
            <summary>
            Template driver
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretInspectTask.Pretty">
            <summary>
            Print the information in a human friendly format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretLsTask.Format(System.String)">
            <summary>
            Pretty-print secrets using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Secret.DockerSecretLsTask.Quiet">
            <summary>
            Only display IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Config(System.String)">
            <summary>
            Specify configurations to expose to the service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Constraint(System.String)">
            <summary>
            Placement constraints
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.ContainerLabel(System.String)">
            <summary>
            Container labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.CredentialSpec(System.String)">
            <summary>
            Credential spec for managed service account (Windows only)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Detach" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Dns(System.String)">
            <summary>
            Set custom DNS servers
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.DnsOption(System.String)">
            <summary>
            Set DNS options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.DnsSearch(System.String)">
            <summary>
            Set custom DNS search domains
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.EndpointMode(System.String)">
            <summary>
            Endpoint mode (vip or dnsrr)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Env(System.String)">
            <summary>
            Set environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.EnvFile(System.String)">
            <summary>
            Read in a file of environment variables
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.GenericResource(System.String)">
            <summary>
            User defined resources
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Group(System.String)">
            <summary>
            Set one or more supplementary user groups for the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.HealthStartPeriod(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.HealthTimeout(System.String)">
            <summary>
            Maximum time to allow one check to run (ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Host(System.String)">
            <summary>
            Set one or more custom host-to-IP mappings (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Hostname(System.String)">
            <summary>
            Container hostname
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Isolation(System.String)">
            <summary>
            Service container isolation mode
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Label(System.String)">
            <summary>
            Service labels
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.LimitCpu(System.Decimal)">
            <summary>
            Limit CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.LimitMemory(System.String)">
            <summary>
            Limit Memory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.LogDriver(System.String)">
            <summary>
            Logging driver for service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.LogOpt(System.String)">
            <summary>
            Logging driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Mode(System.String)">
            <summary>
            Service mode (replicated or global)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Mount(System.String)">
            <summary>
            Attach a filesystem mount to the service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Name(System.String)">
            <summary>
            Service name
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Network(System.String)">
            <summary>
            Network attachments
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.NoResolveImage" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.PlacementPref(System.String)">
            <summary>
            Add a placement preference
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Publish(System.String)">
            <summary>
            Publish a port as a node port
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Quiet">
            <summary>
            Suppress progress output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Replicas(System.UInt32)">
            <summary>
            Number of tasks
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.ReserveCpu(System.Decimal)">
            <summary>
            Reserve CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.ReserveMemory(System.String)">
            <summary>
            Reserve Memory
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RestartCondition(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RestartDelay(System.String)">
            <summary>
            Delay between restart attempts (ns|us|ms|s|m|h) (default 5s)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RestartMaxAttempts(System.UInt32)">
            <summary>
            Maximum number of restarts before giving up
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RestartWindow(System.String)">
            <summary>
            Window used to evaluate the restart policy (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackDelay(System.String)">
            <summary>
            Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackFailureAction(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackMaxFailureRatio(System.Single)">
            <summary>
            Failure rate to tolerate during a rollback (default 0)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackMonitor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackOrder(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.RollbackParallelism(System.UInt64)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Secret(System.String)">
            <summary>
            Specify secrets to expose to the service
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.StopGracePeriod(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.StopSignal(System.String)">
            <summary>
            Signal to stop the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateDelay(System.String)">
            <summary>
            Delay between updates (ns|us|ms|s|m|h) (default 0s)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateFailureAction(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateMaxFailureRatio(System.Single)">
            <summary>
            Failure rate to tolerate during an update (default 0)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateMonitor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateOrder(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.UpdateParallelism(System.UInt64)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.WithRegistryAuth">
            <summary>
            Send registry authentication details to swarm agents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceCreateTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceInspectTask.Pretty">
            <summary>
            Print the information in a human friendly format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Details">
            <summary>
            Show extra details provided to logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Follow">
            <summary>
            Follow log output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.NoResolve">
            <summary>
            Do not map IDs to Names in output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.NoTaskIds">
            <summary>
            Do not include task IDs in output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Raw">
            <summary>
            Do not neatly format logs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Since(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Tail(System.String)">
            <summary>
            Number of lines to show from the end of the logs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLogsTask.Timestamps">
            <summary>
            Show timestamps
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLsTask.Format(System.String)">
            <summary>
            Pretty-print services using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceLsTask.Quiet">
            <summary>
            Only display IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServicePsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServicePsTask.Format(System.String)">
            <summary>
            Pretty-print tasks using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServicePsTask.NoResolve">
            <summary>
            Do not map IDs to Names
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServicePsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServicePsTask.Quiet">
            <summary>
            Only display task IDs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceRollbackTask.Detach" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceRollbackTask.Quiet">
            <summary>
            Suppress progress output
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceScaleTask.Detach" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Args(System.String)">
            <summary>
            Service command args
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ConfigAdd(System.String)">
            <summary>
            Add or update a config file on a service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ConfigRm(System.String)">
            <summary>
            Remove a configuration file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ConstraintAdd(System.String)">
            <summary>
            Add or update a placement constraint
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ConstraintRm(System.String)">
            <summary>
            Remove a constraint
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ContainerLabelAdd(System.String)">
            <summary>
            Add or update a container label
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ContainerLabelRm(System.String)">
            <summary>
            Remove a container label by its key
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.CredentialSpec(System.String)">
            <summary>
            Credential spec for managed service account (Windows only)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Detach" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsAdd(System.String)">
            <summary>
            Add or update a custom DNS server
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsOptionAdd(System.String)">
            <summary>
            Add or update a DNS option
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsOptionRm(System.String)">
            <summary>
            Remove a DNS option
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsRm(System.String)">
            <summary>
            Remove a custom DNS server
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsSearchAdd(System.String)">
            <summary>
            Add or update a custom DNS search domain
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.DnsSearchRm(System.String)">
            <summary>
            Remove a DNS search domain
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.EndpointMode(System.String)">
            <summary>
            Endpoint mode (vip or dnsrr)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Entrypoint(System.String)">
            <summary>
            Overwrite the default ENTRYPOINT of the image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.EnvAdd(System.String)">
            <summary>
            Add or update an environment variable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.EnvRm(System.String)">
            <summary>
            Remove an environment variable
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Force">
            <summary>
            Force update even if no changes require it
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.GenericResourceAdd(System.String)">
            <summary>
            Add a Generic resource
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.GenericResourceRm(System.String)">
            <summary>
            Remove a Generic resource
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.GroupAdd(System.String)">
            <summary>
            Add an additional supplementary user group to the container
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.GroupRm(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HealthCmd(System.String)">
            <summary>
            Command to run to check health
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HealthInterval(System.String)">
            <summary>
            Time between running the check (ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HealthRetries(System.Int32)">
            <summary>
            Consecutive failures needed to report unhealthy
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HealthStartPeriod(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HealthTimeout(System.String)">
            <summary>
            Maximum time to allow one check to run (ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HostAdd(System.String)">
            <summary>
            Add a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.HostRm(System.String)">
            <summary>
            Remove a custom host-to-IP mapping (host:ip)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Hostname(System.String)">
            <summary>
            Container hostname
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Image(System.String)">
            <summary>
            Service image tag
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Isolation(System.String)">
            <summary>
            Service container isolation mode
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LabelAdd(System.String)">
            <summary>
            Add or update a service label
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LabelRm(System.String)">
            <summary>
            Remove a label by its key
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LimitCpu(System.Decimal)">
            <summary>
            Limit CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LimitMemory(System.String)">
            <summary>
            Limit Memory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LogDriver(System.String)">
            <summary>
            Logging driver for service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.LogOpt(System.String)">
            <summary>
            Logging driver options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.MountAdd(System.String)">
            <summary>
            Add or update a mount on a service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.MountRm(System.String)">
            <summary>
            Remove a mount by its target path
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.NetworkAdd(System.String)">
            <summary>
            Add a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.NetworkRm(System.String)">
            <summary>
            Remove a network
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.NoHealthcheck">
            <summary>
            Disable any container-specified HEALTHCHECK
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.NoResolveImage" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.PlacementPrefAdd(System.String)">
            <summary>
            Add a placement preference
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.PlacementPrefRm(System.String)">
            <summary>
            Remove a placement preference
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.PublishAdd(System.String)">
            <summary>
            Add or update a published port
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.PublishRm(System.String)">
            <summary>
            Remove a published port by its target port
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Quiet">
            <summary>
            Suppress progress output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ReadOnly">
            <summary>
            Mount the container's root filesystem as read only
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Replicas(System.UInt32)">
            <summary>
            Number of tasks
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ReserveCpu(System.Decimal)">
            <summary>
            Reserve CPUs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.ReserveMemory(System.String)">
            <summary>
            Reserve Memory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RestartCondition(System.String)">
            <summary>
            Restart when condition is met ("none"|"on-failure"|"any")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RestartDelay(System.String)">
            <summary>
            Delay between restart attempts (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RestartMaxAttempts(System.UInt32)">
            <summary>
            Maximum number of restarts before giving up
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RestartWindow(System.String)">
            <summary>
            Window used to evaluate the restart policy (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Rollback">
            <summary>
            Rollback to previous specification
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackDelay(System.String)">
            <summary>
            Delay between task rollbacks (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackFailureAction(System.String)">
            <summary>
            Action on rollback failure ("pause"|"continue")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackMaxFailureRatio(System.Single)">
            <summary>
            Failure rate to tolerate during a rollback
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackMonitor(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackOrder(System.String)">
            <summary>
            Rollback order ("start-first"|"stop-first")
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.RollbackParallelism(System.UInt64)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.SecretAdd(System.String)">
            <summary>
            Add or update a secret on a service
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.SecretRm(System.String)">
            <summary>
            Remove a secret
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.StopGracePeriod(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.StopSignal(System.String)">
            <summary>
            Signal to stop the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Tty">
            <summary>
            Allocate a pseudo-TTY
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateDelay(System.String)">
            <summary>
            Delay between updates (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateFailureAction(System.String)">
            <summary>
            Action on update failure ("pause"|"continue"|"rollback")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateMaxFailureRatio(System.Single)">
            <summary>
            Failure rate to tolerate during an update
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateMonitor(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateOrder(System.String)">
            <summary>
            Update order ("start-first"|"stop-first")
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.UpdateParallelism(System.UInt64)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.User(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.WithRegistryAuth">
            <summary>
            Send registry authentication details to swarm agents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Service.DockerServiceUpdateTask.Workdir(System.String)">
            <summary>
            Working directory inside the container
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackDeployTask.BundleFile(System.String)">
            <summary>
            Path to a Distributed Application Bundle file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackDeployTask.ComposeFile(System.String)">
            <summary>
            Path to a Compose file
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackDeployTask.Prune">
            <summary>
            Prune services that are no longer referenced
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Stack.DockerStackDeployTask.ResolveImage(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackDeployTask.WithRegistryAuth">
            <summary>
            Send registry authentication details to Swarm agents
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackLsTask.Format(System.String)">
            <summary>
            Pretty-print stacks using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackPsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackPsTask.Format(System.String)">
            <summary>
            Pretty-print tasks using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackPsTask.NoResolve">
            <summary>
            Do not map IDs to Names
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackPsTask.NoTrunc">
            <summary>
            Do not truncate output
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackPsTask.Quiet">
            <summary>
            Only display task IDs
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackServicesTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackServicesTask.Format(System.String)">
            <summary>
            Pretty-print services using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Stack.DockerStackServicesTask.Quiet">
            <summary>
            Only display IDs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.CaCert(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.CaKey(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.CertExpiry(System.String)">
            <summary>
            Validity period for node certificates (ns|us|ms|s|m|h)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.Detach" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.ExternalCa(System.String)">
            <summary>
            Specifications of one or more certificate signing endpoints
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.Quiet">
            <summary>
            Suppress progress output
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmCaTask.Rotate" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.AdvertiseAddr(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.Autolock" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.Availability(System.String)">
            <summary>
            Availability of the node ("active"|"pause"|"drain")
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.CertExpiry(System.String)">
            <summary>
            Validity period for node certificates (ns|us|ms|s|m|h)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.DataPathAddr(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.DispatcherHeartbeat(System.String)">
            <summary>
            Dispatcher heartbeat period (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.ExternalCa(System.String)">
            <summary>
            Specifications of one or more certificate signing endpoints
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.ForceNewCluster">
            <summary>
            Force create a new cluster from current state
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.ListenAddr(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.MaxSnapshots(System.UInt64)">
            <summary>
            Number of additional Raft snapshots to retain
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.SnapshotInterval(System.UInt64)">
            <summary>
            Number of log entries between Raft snapshots
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmInitTask.TaskHistoryLimit(System.Int64)">
            <summary>
            Task history retention limit
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTask.AdvertiseAddr(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTask.Availability(System.String)">
            <summary>
            Availability of the node ("active"|"pause"|"drain")
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTask.DataPathAddr(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTask.ListenAddr(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTask.Token(System.String)">
            <summary>
            Token for entry into the swarm
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTokenTask.Quiet">
            <summary>
            Only display token
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmJoinTokenTask.Rotate">
            <summary>
            Rotate join token
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmLeaveTask.Force">
            <summary>
            Force this node to leave the swarm, ignoring warnings
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUnlockKeyTask.Quiet">
            <summary>
            Only display token
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUnlockKeyTask.Rotate">
            <summary>
            Rotate unlock key
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.Autolock">
            <summary>
            Change manager autolocking setting (true|false)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.CertExpiry(System.String)">
            <summary>
            Validity period for node certificates (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.DispatcherHeartbeat(System.String)">
            <summary>
            Dispatcher heartbeat period (ns|us|ms|s|m|h)
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.ExternalCa(System.String)">
            <summary>
            Specifications of one or more certificate signing endpoints
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.MaxSnapshots(System.UInt64)">
            <summary>
            Number of additional Raft snapshots to retain
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.SnapshotInterval(System.UInt64)">
            <summary>
            Number of log entries between Raft snapshots
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Swarm.DockerSwarmUpdateTask.TaskHistoryLimit(System.Int64)">
            <summary>
            Task history retention limit
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemDfTask.Format(System.String)">
            <summary>
            Pretty-print images using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemDfTask.Verbose">
            <summary>
            Show detailed information on space usage
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemEventsTask.Filter(System.String)">
            <summary>
            Filter output based on conditions provided
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemEventsTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemEventsTask.Since(System.String)">
            <summary>
            Show all events created since timestamp
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemEventsTask.Until(System.String)">
            <summary>
            Stream events until this timestamp
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemInfoTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemPruneTask.All">
            <summary>
            Remove all unused images not just dangling ones
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.System.DockerSystemPruneTask.Filter(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemPruneTask.Force">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.System.DockerSystemPruneTask.Volumes">
            <summary>
            Prune volumes
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustInspectTask.Pretty">
            <summary>
            Print the information in a human friendly format
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustKeyGenerateTask.Dir(System.String)">
            <summary>
            Directory to generate key in, defaults to current directory
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustKeyLoadTask.Name(System.String)">
            <summary>
            Name for the loaded key
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustRevokeTask.Yes">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustSignerAddTask.Key(System.String)">
            <summary>
            Path to the signer's public key file
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Trust.DockerTrustSignerRemoveTask.Force" -->
        <member name="M:FlubuCore.Tasks.Docker.Trust.DockerTrustSignTask.Local">
            <summary>
            Sign a locally tagged image
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeCreateTask.Driver(System.String)">
            <summary>
            Specify volume driver name
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeCreateTask.Label(System.String)">
            <summary>
            Set metadata for a volume
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeCreateTask.Name(System.String)">
            <summary>
            Specify volume name
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeCreateTask.Opt(System.String)">
            <summary>
            Set driver specific options
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeInspectTask.Format(System.String)">
            <summary>
            Format the output using the given Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeLsTask.Filter(System.String)">
            <summary>
            Provide filter values (e.g. 'dangling=true')
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeLsTask.Format(System.String)">
            <summary>
            Pretty-print volumes using a Go template
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeLsTask.Quiet">
            <summary>
            Only display volume names
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Tasks.Docker.Volume.DockerVolumePruneTask.Filter(System.String)" -->
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumePruneTask.Force">
            <summary>
            Do not prompt for confirmation
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Docker.Volume.DockerVolumeRmTask.Force">
            <summary>
            Force the removal of one or more volumes
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.DoTaskBase`2.SetTaskName(System.String)">
            <summary>
            Name of the task that is displayed in help.
            </summary>
            <param name="taskName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.DoTaskBase`2.AddArgumentHelp(System.String,System.String)">
            <summary>
            Adds help for specified argument.
            </summary>
            <param name="argKey"></param>
            <param name="help"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask">
            <summary>
                Copies a directory tree from the source to the destination.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask" /> class
                using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.CopiedFilesList">
            <summary>
                Gets the list of all destination files that were copied.
            </summary>
            <value>The list of all destination files that were copied.</value>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern">
            <summary>
                Gets or sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will not be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
            <value>The exclusion pattern.</value>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern">
            <summary>
                Gets or sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
            <value>The inclusion pattern.</value>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.SourcePath(System.String)">
            <summary>
            The source path.
            </summary>
            <param name="sourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.DestinationPath(System.String)">
            <summary>
            The destination path.
            </summary>
            <param name="destinationPath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.SetExclusionPattern(System.String)">
            <summary>
                Sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will not be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.SetInclusionPattern(System.String)">
            <summary>
                sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CopyFileTask">
            <summary>
                Copies file to specified soruce
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyFileTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Copies file to specified destination location.
            </summary>
            <param name="sourceFileName">Path of file to be copied. </param>
            <param name="destinationFileName">Destination location of the file to be copied.</param>
            <param name="overwrite">if <c>true</c> file on the destionation location is overwriren if it exists. Otherwise not.</param>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyFileTask.SourcePath(System.String)">
            <summary>
            The source path.
            </summary>
            <param name="sourceFileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyFileTask.DestinationPath(System.String)">
            <summary>
            The destination path.
            </summary>
            <param name="destinationFileName"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CreateDirectoryTask">
            <summary>
            Task creates directroy
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CreateDirectoryTask.#ctor(System.String,System.Boolean)">
            <summary>
            Task creates directory at the given location.
            </summary>
            <param name="directoryPath"></param>
            <param name="forceRecreate">If <c>true</c> directory is deleted if it exists and then created again.</param>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.DeleteFilesTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="directoryPath"></param>
            <param name="filePattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters but doesnt support regular expressions.</param>
            <param name="recursive">If true it searches and deletes all matching files in subdirectories.</param>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.DeleteFilesTask.FilePattern(System.String)">
            <summary>
            The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters but doesnt support regular expressions.
            </summary>
            <param name="filePattern"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.DeleteFilesTask.Recursive">
            <summary>
            If true it searches and deletes all matching files in subdirectories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.ExecuteFlubuScriptTask.AddScriptArgument(System.String,System.String)">
            <summary>
            Adds argument with specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.GetTokenTask.SetWebApiBaseUrl(System.String)">
            <summary>
            Set's web api base url on web api client.
            </summary>
            <param name="webApiUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.GetTokenTask.SetTimeout(System.TimeSpan)">
            <summary>
            Set's timeout on web api client.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.UploadPackageTask.PackageSearchPattern(System.String)">
            <summary>
            The search string to match against the names of files(packages). This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
            </summary>
            <param name="packageSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.#ctor">
            <summary>
            Task updates the index using the current content found in the working tree, to prepare the content staged for the next commit.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.PathSpec(System.String)">
            <summary>
            Files to add content from. Fileglobs (e.g. *.c) can be given to add all matching files.
            Also a leading directory name (e.g. dir to add dir/file1 and dir/file2) can be given
            to update the index to match the current state of the directory as a whole.
            </summary>
            <param name="pathSpec"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.Verbose">
            <summary>
            Be verbose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.DryRun">
            <summary>
            Don’t actually add the file(s), just show if they exist and/or will be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.Force">
            <summary>
            allow adding otherwise ignored files
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitAddTask.IgnoreErrors">
            <summary>
            just skip files which cannot be added because of errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCheckoutTask.Detach">
            <summary>
            Detach repo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.Branch(System.String)">
            <summary>
            checkout specified branch instead of the remote's HEAD.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.ShowProgress">
            <summary>
            force progress reporting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.Verbose">
            <summary>
            be more verbose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.Quiet">
            <summary>
            be more quiet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.NoCheckout">
            <summary>
            don't create a checkout
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.CreateBareRepository">
            <summary>
            create a bare repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCloneTask.SetupAsSharedRepository">
            <summary>
            setup as shared repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.Author(System.String)">
            <summary>
            Override the commit author. Specify an explicit author using the standard A U Thor author@example.com format.
            </summary>
            <param name="author"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.Message(System.String)">
            <summary>
            Use the given as the commit message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.CommitAll">
            <summary>
            Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.DryRun">
            <summary>
            Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.Verbose">
            <summary>
            be more verbose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.Quiet">
            <summary>
            be more quiet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitCommitTask.AddFile(System.String)">
            <summary>
            When files are given on the command line, the command commits the contents of the named files, without recording the changes already staged. The contents of these files are also staged for the next commit on top of what have been staged before.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPullTask.ShowProgress">
            <summary>
            force progress reporting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPullTask.Verbose">
            <summary>
            be more verbose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPullTask.Quiet">
            <summary>
            be more quiet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPullTask.Squash">
            <summary>
            create a single commit instead of doing a merge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.Repository(System.String)">
            <summary>
            The "remote" repository that is destination of a push operation.
            This parameter can be either a URL or the name of a remote.
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.RefSpec(System.String)">
            <summary>
            Specify what destination ref to update with what source object. See https://git-scm.com/docs/git-push for more info
            </summary>
            <param name="refSpec"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.Verbose">
            <summary>
            Be verbose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.Quiet">
            <summary>
            be more quiet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.DryRun">
            <summary>
            Do everything except actually send the updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitPushTask.Force">
            <summary>
            force updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitRemoveFilesTask.#ctor(System.String)">
            <summary>
            Remove files from the index, or from the working tree and the index. git rm will not remove a file from just your working directory.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitRemoveFilesTask.Force">
            <summary>
            override the up-to-date check
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitRemoveFilesTask.Quiet">
            <summary>
            be more quiet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitRemoveFilesTask.DryRun">
            <summary>
            Do everything except actually send the updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitSubmoduleTask.Update">
            <summary>
                Submodule update command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitSubmoduleTask.Init">
            <summary>
                Add --init argument
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitSubmoduleTask.Recursive">
            <summary>
                Add --recursive argument
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitSubmoduleTask.Remote">
            <summary>
                Add --remote argument
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitSubmoduleTask.Merge">
            <summary>
                Add --merge argument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.#ctor(System.String)">
            <summary>
            Task updates the index using the current content found in the working tree, to prepare the content staged for the next commit.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.Delete">
            <summary>
            Delete tag(s).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.Annotate">
            <summary>
            annotated tag, needs a message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.Message(System.String)">
            <summary>
            tag message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.Force">
            <summary>
            replace the tag if exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Git.GitTagTask.GpgSign">
            <summary>
            annotated and GPG-signed tag.
            </summary>
            <returns></returns>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Start">
            <summary>
            Start the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Stop">
            <summary>
            Stop the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Recycle">
            <summary>
            Recycle the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.FailIfAlreadyExists">
            <summary>
            The task should fail if the application pool already exists.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.UpdateIfExists">
            <summary>
            If the application pool already exists, it should be updated.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.DoNothingIfExists">
            <summary>
            If the application pool already exists, the task should do nothing.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.FailIfAlreadyExists">
            <summary>
            If the application already exists, the task should fail.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.UpdateIfExists">
            <summary>
            If the application already exists, it should be updated.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.DoNothingIfExists">
            <summary>
            If the application already exists, the task should do nothing.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebApplicationTask.WebsiteName(System.String)">
            <summary>
            Gets or sets the Name of the website that the web application is added too. By default it is "Default Web Site"
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._webSiteName">
            <summary>
            Name of the website
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._bindingProtocol">
            <summary>
            The binding protocol. Http or https.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._port">
            <summary>
            Port of the web application
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._physicalPath">
            <summary>
            Physical path to application.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Creates or updated the web site.
            </summary>
            <param name="context">The task context</param>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.Validate">
            <summary>
            Validates Ii7CreateWebSiteTask properties.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteBindingProtocol.BindingProtocol(System.String)">
            <summary>
            Sets the binding protocol. Http or https.
            </summary>
            <param name="value">The binding protocol. Supported values http and https.</param>
            <returns>new instance of <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteProtocol"/></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteProtocol.Port(System.Int32)">
            <summary>
            Sets the port of the web site.
            </summary>
            <param name="value">The port</param>
            <returns>New instance of <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsitePhysicalPath"/></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsitePhysicalPath.PhysicalPath(System.String)">
            <summary>
            Sets the physical path to the web site.
            </summary>
            <param name="value">The physical path.</param>
            <returns>The iI7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IisTaskBase`1.AddMimeTypes(Microsoft.Web.Administration.Configuration,System.Collections.Generic.IList{FlubuCore.Tasks.Iis.MimeType})">
            <summary>
            Adds mime types.
            </summary>
            <param name="config">Config of the website or web application</param>
            <param name="mimeTypes">List of mime types to be added</param>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IisTaskBase`1.WebsiteExists(Microsoft.Web.Administration.ServerManager,System.String)">
            <summary>
            Checks if web site exists in the iis.
            </summary>
            <param name="serverManager">the server manager.</param>
            <param name="siteName">Site name to be checked if it exists.</param>
            <returns>True if web site exists in iis.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.AddBinding(System.String)">
            <summary>
            Add's binding.
            </summary>
            <param name="protocol">Binding protocol</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.SiteName(System.String)">
            <summary>
            Web site name binding is added to.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.CertificateStore(System.String)">
            <summary>
            Certificate store.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.CertificateHash(System.String)">
            <summary>
            Hash of the certificate.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.ApplicationName(System.String)">
            <summary>
            Application Name.
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.ApplicationPoolName(System.String)">
            <summary>
                Name of the application pool application will be controoler by.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.WebsiteName(System.String)">
            <summary>
                Web site name web application will be added to.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.AddMimeType(System.String[])">
            <summary>
                Mime types to be added.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IControlAppPoolTask.FailIfNotExist">
            <summary>
            If <c>true</c> task fails with exception if application pool doesn't exists. Otherwise not.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateAppPoolTask.UseClassicManagedPipelineMode">
            <summary>
            Classic managed pipelinemode will be used instead of integrated managed pipelinemode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateAppPoolTask.ManagedRuntimeVersion(System.String)">
            <summary>
            Set the Managed runtime version(.net CLR version). By default latest is used.
            </summary>
            <param name="managedRuntimeVersion"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.WebsiteName(System.String)">
            <summary>
            set the web site name.
            </summary>
            <param name="siteName">The web site name.</param>
            <returns>The <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteBindingProtocol"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.WebsiteMode(FlubuCore.Tasks.Iis.CreateWebApplicationMode)">
            <summary>
            Set Website mode.
            </summary>
            <param name="value">The website Mode <see cref="T:FlubuCore.Tasks.Iis.CreateWebApplicationMode"/> </param>
            <returns>The Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.ApplicationPoolName(System.String)">
            <summary>
            Set web site application pool name.
            </summary>
            <param name="applicationPool">The application pool name</param>
            <returns>The  Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.AddMimeType(FlubuCore.Tasks.Iis.MimeType)">
            <summary>
             Add MimeType. Can be used multiple times.
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>The  Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IDeleteAppPoolTask.ApplicationPoolName(System.String)">
            <summary>
            Set's name of the appication pool to be deleted.
            </summary>
            <param name="appPoolName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IDeleteAppPoolTask.FailIfNotExist">
            <summary>
            task fails with exception if application pool doesn't exists. Otherwise not.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Iis.MimeType.FileExtension">
            <summary>
            Gets or sets File extension of the mime type.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Iis.MimeType.MimeTypeName">
            <summary>
            Gets or sets The Mime type.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.ITask.TaskName">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.ITask.ExecuteVoid(FlubuCore.Context.ITaskContext)">
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.ITask.ExecuteVoidAsync(FlubuCore.Context.ITaskContext)">
            <summary>
            Execute task async
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.ITaskOfT`2">
            <summary>
                Specifies basic properties and methods for a task.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.Execute(FlubuCore.Context.ITaskContext)">
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.Retry(System.Int32,System.Int32,System.Func{FlubuCore.Context.ITaskContext,System.Exception,System.Boolean})">
            <summary>
            Retry task if execution of the task fails.
            </summary>
            <param name="numberOfRetries">Number of retries before task fails.</param>
            <param name="delay">Delay time in miliseconds between retries.</param>
            <param name="condition">Condition when retry will occur. If condition is null task is always retried. </param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.NoLog">
            <summary>
            Do not log messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.DoNotFailOnError(System.Action{System.Exception},System.Func{FlubuCore.Context.ITaskContext,System.Exception,System.Boolean})">
            <summary>
            Do not fail task if error occurs.
            </summary>
            <returns></returns>
            <param name="doNotFailOnErrorAction">Action to be taken if task fails and DoNotFailOnError flag is set.</param>
            <param name="condition">Condition when task will not fail. If condition is null task will never fail. </param>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.Finally(System.Action{FlubuCore.Context.ITaskContext},System.Boolean)">
            <summary>
            Action to be taken when task finisish successfuly or when it fails.
            </summary>
            <param name="finallyAction"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.OnError(System.Action{FlubuCore.Context.ITaskContext,System.Exception})">
            <summary>
            Action to be taken if task fails.
            </summary>
            <param name="onErrorAction"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.When(System.Func{System.Boolean},System.Action{`1})">
            <summary>
            Applies task actions specified in <see cref="!:taskAction"/> to task only when <see cref="!:condition"/>  is meet.
            </summary>
            <param name="condition">The condition to be meet.</param>
            <param name="taskAction">task actions to be applied to task when <see cref="!:condition"/> is meet.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.ForMember(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.String,System.String,System.Boolean)">
            <summary>
            Passes script argument value with specified key in <see cref="!:argKey"/> to specified task method  in <see cref="!:taskMethod"/>
            </summary>
            <param name="taskMember">The method that the parameter value will be modified.</param>
            <param name="argKey">The key of the argument that it will be pass through to method parameter in <see cref="!:taskMethod"/></param>
            <param name="help">The argument help  text that wiil be display in target help. If not specified default help text is used.</param>
            <param name="includeParameterlessMethodByDefault">If <c>true</c> <see cref="!:taskMethod"/> is invoked by default if <see cref="!:argKey"/> is not specified. Oterwise <see cref="!:taskMethod"/> is not invoked by default.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.Interactive(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.String,System.String,System.String)">
            <summary>
            Interactively pass argument from console to specified task method / parameter.
            If argument key is provided when executing target in console that value will be used and interactive mode will be disabled.
            </summary>
            <param name="taskMember">The method / parameter to pass argument.</param>
            <param name="argKey">The key of the argument that it will be pass through to method parameter in <see cref="!:taskMethod"/></param>
            <param name="consoleText">Text in console that will be displayed when entering value for task member.
            If console text is not provided text is generated by FlubuCore.</param>
            <param name="argHelp">The argument help  text that wiil be display in target help. If not specified default help text is used.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.SetDescription(System.String)">
            <summary>
            Overrides default task description.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`2.LogTaskDuration">
            <summary>
            When applied task duration is logged.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.MsSql.SqlCmdTask">
            <summary>
            Execute SQL script file with sqlcmd.exe
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.SqlCmdExecutable(System.String)">
            <summary>
            Add another full path to the sqlcmd executable. First one that is found will be used.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.GetOutput">
            <summary>
            Return output of the sqlcmd command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.GetErrorOutput">
            <summary>
            Return output of the sqlcmd command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.UseServer(System.String,System.String,System.String)">
            <summary>
            Connect to the specified SQL server
            </summary>
            <param name="server"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.UseServer(System.String,System.String,System.String,System.String)">
            <summary>
            Connect to the specified SQL server
            </summary>
            <param name="server"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.Server(System.String)">
            <summary>
            Connect to server.
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.UserName(System.String)">
            <summary>
            Use userName when connecting to the DB.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.Password(System.String)">
            <summary>
            Use password when connecting to the DB.
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.TrustedConnection">
            <summary>
            Use trusted connection when connecting to the DB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.Database(System.String)">
            <summary>
            Use database name.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.ForceUtf8">
            <summary>
            Force that file is in UTF8 encoding. Skip auto detection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.MsSql.SqlCmdTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="T:FlubuCore.Tasks.NetCore.DotnetBuildTask">
            <summary>
            Publishes a .NET project for deployment (including the runtime).
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Project(System.String)">
            <summary>
            The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.AddRuntime(System.String)">
            <summary>
            Target runtime to build for. The default is to build a portable application.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.NoIncrementail">
            <summary>
             Disables incremental build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Force">
            <summary>
            Set this flag to force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Framework(System.String)">
            <summary>
            Clean a specific framework.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Configuration(System.String)">
            <summary>
            Clean a specific configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.AddDirectoryToClean(System.String,System.Boolean)">
            <summary>
            Task deletes added directory.
            </summary>
            <param name="directory">The directory do delete</param>
            <param name="recreate">If <c>true</c> directory is recreated. Otherwise deleted.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.CleanOutputDir">
            <summary>
            If set output directory specified in <see cref="F:FlubuCore.Context.BuildProps.OutputDir"/> is deleted and recreated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.CleanBuildDir">
            <summary>
            If set Build directory specified in <see cref="F:FlubuCore.Context.BuildProps.BuildDir"/> is deleted and recreated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.#ctor(System.String)">
            <summary>
            Pushes the nuget package to nuget server.
            </summary>
            <param name="packagePath">Path to nupkg</param>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.ServerUrl(System.String)">
            <summary>
             Specifies the server URL
            </summary>
            <param name="serverUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.SymbolServerUrl(System.String)">
            <summary>
             Specifies the symbol server URL. If not specified, nuget.smbsrc.net is used when pushing to nuget.org.
            </summary>
            <param name="symbolServerUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.SkipPushOnLocalBuild">
            <summary>
            If applied pushing packages to nuget repository is disabled on local build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.ApiKey(System.String)">
            <summary>
            The API key for the server.
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.SymbolApiKey(System.String)">
            <summary>
            The API key for the symbol server.
            </summary>
            <param name="symbolApyKey"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.Timeout(System.Int32)">
            <summary>
            Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes). Specifying 0 (zero seconds) applies the default value.
            </summary>
            <param name="timeoutInSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Project(System.String)">
            <summary>
            The project to pack, defaults to the project file in the current directory. Can be a path to any project file
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.OutputDirectory(System.String)">
            <summary>
            Directory in which to place built packages.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.IncludeSymbols">
            <summary>
            Include packages with symbols in addition to regular packages in output directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.IncludeSource">
            <summary>
            Include PDBs and source files. Source files go into the src folder in the resulting nuget package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.VersionSufix(System.String)">
            <summary>
             Defines the value for the $(VersionSuffix) property in the project.
            </summary>
            <param name="versionSufix"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.NoBuild">
            <summary>
             Skip building the project prior to packing. By default, the project will be built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Servicable">
            <summary>
            Set the serviceable flag in the package. For more information, please see https://aka.ms/nupkgservicing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Force">
            <summary>
            Set this flag to force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.NetCore.DotnetPublishTask">
            <summary>
            Publishes a .NET project for deployment (including the runtime).
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Framework(System.String)">
            <summary>
            Target framework to publish for. The target framework has to be specified in the project file.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.AddRuntime(System.String)">
            <summary>
            Target runtime to publish for. The default is to build a portable application.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.OutputDirectory(System.String)">
            <summary>
            Output directory in which to place the published artifacts.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Force">
            <summary>
            Set this flag to force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.AddNugetSouce(System.String)">
            <summary>
            Add a NuGet package source to use during the restore.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.AddRuntime(System.String)">
            <summary>
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.PackagesDirectory(System.String)">
            <summary>
            Directory to install packages in.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.DisableParallel">
            <summary>
            Disables restoring multiple projects in parallel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NugetConfigFile(System.String)">
            <summary>
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NoCache">
            <summary>
            Do not cache packages and http requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.IgnoreFailedSources">
            <summary>
            Treat package source failures as warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.Force">
            <summary>
            Set this flag to force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Framework(System.String)">
            <summary>
            Looks for test binaries for a specific framework
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.OutputDirectory(System.String)">
            <summary>
            Directory in which to find the binaries to be run
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.SetSettingFileToUse(System.String)">
            <summary>
            Settings to use when running tests.
            </summary>
            <param name="settingFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.SetTestAdapterPath(System.String)">
            <summary>
            Use custom adapters from the given path in the test run.
            </summary>
            <param name="pathToAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.AddFilter(System.String)">
            <summary>
            Run tests that match the given expression.
            Examples:
            Run tests with priority set to 1: --filter "Priority = 1"
            Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
            Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class"
            More info on filtering support: https://aka.ms/vstest-filtering
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.VerboseLogs(System.String)">
            <summary>
            Enable verbose logs for test platform. Logs are written to the provided file.
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.NoBuild">
            <summary>
            Do not build project before testing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.ResultDirectory(System.String)">
            <summary>
            The directory where the test results are going to be placed. The specified directory will be created if it does not exist.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.#ctor(System.String)">
            <summary>
            Installs a tool for use on the command line.
            </summary>
            <param name="nugetPackageId">NuGet Package Id of the tool to install.</param>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.NugetPackageVersion(System.String)">
            <summary>
            Version of the tool package in NuGet.
            </summary>
            <param name="version">The version</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.Global">
            <summary>
             Install user wide as global tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.ToolInstallationPath(System.String)">
            <summary>
            Location where the tool will be installed.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.NugetConfigFile(System.String)">
            <summary>
            The NuGet configuration file to use.
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.AddNugetSource(System.String)">
            <summary>
            Adds an additional NuGet package source to use during installation.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.Framework(System.String)">
            <summary>
            The target framework to install the tool for.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolInstall.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUninstall.#ctor(System.String)">
            <summary>
            Uninstalls a tool.
            </summary>
            <param name="nugetPackageId">NuGet Package Id of the tool to uninstall.</param>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUninstall.Global">
            <summary>
            Uninstall user wide.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUninstall.ToolPath(System.String)">
            <summary>
            Location where the tool was previously installed.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.#ctor(System.String)">
            <summary>
            Installs a tool for use on the command line.
            </summary>
            <param name="nugetPackageId">NuGet Package Id of the tool to install.</param>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.Global">
            <summary>
            Update user wide as global tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.ToolInstallationPath(System.String)">
            <summary>
            Location where the tool will be installed.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.NugetConfigFile(System.String)">
            <summary>
            The NuGet configuration file to use.
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.AddNugetSource(System.String)">
            <summary>
            Adds an additional NuGet package source to use during installation.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.Framework(System.String)">
            <summary>
            The target framework to install the tool for.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetToolUpdate.Verbosity(FlubuCore.Tasks.VerbosityOptions)">
            <summary>
            Set the verbosity level of the command.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Tasks.NetCore.ExecuteDotnetTaskBase`1.Command">
            <summary>
            Dotnet command to be executed.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.NuGetVerbosity">
            <summary>
            Verbosity
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.ApiKey">
            <summary>
            The API key for the server
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.NuGetPath(System.String)">
            <summary>
            Path to the nuget.exe
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="P:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.BasePath">
            <summary>
            nuget base path argument to be added.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.NugetServerUrl(System.String)">
            <summary>
            Nuget server url package will be pushed to.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.SkipPushOnLocalBuild">
            <summary>
            If applied pushing packages to nuget repository is disabled on local build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUse(System.String)">
            <summary>
            Nuget server Api key.
            </summary>
            <param name="apiKey"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUseEnvironmentVariable(System.String)">
            <summary>
            Name of the enviroment variable to use to get api key.
            </summary>
            <param name="variableName"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUseFile(System.String)">
            <summary>
            Path to the file that contains api key.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddDirectoryToPackage(System.String,System.String,System.Boolean)">
            <summary>
            Add's specified directory to the package.
            </summary>
            <param name="sourceDirectoryPath">Path of the source directory to be copied.</param>
            <param name="destinationDirectory">Name of the directory that the source directory will be copied to.</param>
            <param name="recursive">If <c>true</c> subfolders in the source directory are also added. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddDirectoryToPackage(System.String,System.String,System.Boolean,FlubuCore.Packaging.IFileFilter[])">
            <summary>
            Add's directory to the package.
            </summary>
            <param name="sourceDirectoryPath">Path of the source directory to be copied.</param>
            <param name="destinationDirectory">Name of the directory that the source directory will be copied to.</param>
            <param name="recursive">If <c>true</c> subfolders in the source directory are also added. Otherwise not.</param>
            <param name="fileFilters"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddFileToPackage(System.String,System.String)">
            <summary>
            Adds file to the package
            </summary>
            <param name="sourceFilePath">Path of the tile to be added to the package.</param>
            <param name="destinationDirectory">Name of the directory that the source file will be copied to.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.OptimizeZip">
            <summary>
            If <c>true</c> zip is optimized by removing duplicated files. When unziped those files are copied to original locations.
            For unziping Unzip task has to be ussed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.DisableLogging">
            <summary>
            Disables logging of filtered out files and files to be coppied / zipped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.ZipPackage(System.String,System.Boolean,System.Int32)">
            <summary>
            Zip't the package
            </summary>
            <param name="zipFileName">File name of the zip package.</param>
            <param name="addVersionPostfix">if <c>true</c> build version number is added to zip file as postfix</param>
            <param name="versionFeildCount">Number of version fields to be added.</param>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.ExecuteWorkingFolder">
            <summary>
            Gets or sets working folder.
            </summary>
            <value>
            Working folder.
            </value>
        </member>
        <member name="P:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.ExecutablePath">
            <summary>
            Executable path.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.NoOutputLog">
            <summary>
            Do not log to console if possible.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.WithArgumentsValueRequired(System.String,System.String,System.Boolean)">
            <summary>
            Adds argument with corresponding value. eg --Framework .net462 where --Framework is key and .net462 is value.
            If value is null or empty task fails on execution. if key is null both argument's are ignored.
            </summary>
            <param name="argKey"></param>
            <param name="argValue"></param>
            <param name="maskValue">If <c>true</c> value is masked.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.WithArguments(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.WithArguments(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.WorkingFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.DoNotLogOutput">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.ClearArguments">
            <inheritdoc />
            <summary>
            Clear all arguments for command line executable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.Executable(System.String)">
            <inheritdoc />
            <summary>
            Full file path to the executable.
            </summary>
            <param name="executableFullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.CaptureOutput">
            <summary>
            Captures the output of the executable.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.CaptureErrorOutput">
            <summary>
            Captures the error output of the executable.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.GetOutput">
            <summary>
            Get the output produced by the executable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.GetErrorOutput">
            <summary>
            Get the error output produced by the executable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.ExternalProcessTaskBase`2.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.Executable(System.String)">
            <summary>
            Set the full file path of the executable file.
            </summary>
            <param name="executableFullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.WithArguments(System.String,System.Boolean)">
            <summary>
            Add argument for executable.
            </summary>
            <param name="arg"></param>
            <param name="maskArg">If <c>true</c> argument is masked. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.WithArguments(System.String[])">
            <summary>
            Add arguments for executable.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.ClearArguments">
            <summary>
            Clear all arguments for the command line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.WorkingFolder(System.String)">
            <summary>
            Set the working folder for the executable.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IExternalProcess`1.DoNotLogOutput">
            <summary>
            Do not log output to the console.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Process.IRunProgramTask">
            <inheritdoc cref="T:FlubuCore.Tasks.ITaskOfT`2" />
        </member>
        <member name="M:FlubuCore.Tasks.Process.IRunProgramTask.CaptureOutput">
            <summary>
                Capture output of the running program.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IRunProgramTask.CaptureErrorOutput">
            <summary>
                Capture error output of the running program.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IRunProgramTask.GetOutput">
            <summary>
                Gets the whole output of the executed command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.IRunProgramTask.GetErrorOutput">
            <summary>
                Gets the whole error output of the executed command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.#ctor(Microsoft.DotNet.Cli.Utils.ICommandFactory,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WithArguments(System.String,System.Boolean)">
            <inheritdoc />
            <summary>
            Add's argument to the program.
            </summary>
            <param name="arg"></param>
            <param name="maskArg"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WithArguments(System.String[])">
            <summary>
            Add's arguments to the program.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WorkingFolder(System.String)">
            <inheritdoc />
            <summary>
            Working folder of the program.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.CaptureOutput">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.CaptureErrorOutput">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.GetOutput">
            <inheritdoc />
            <summary>
            Get the output produced by executable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.GetErrorOutput">
            <inheritdoc />
            <summary>
            Get the error output produced by executable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.DoNotLogOutput">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CleanOutputTask.AddDirectoryToClean(System.String,System.Boolean)">
            <summary>
            Task deletes added directory
            </summary>
            <param name="directory">The directory do delete</param>
            <param name="recreate">If <c>true</c> directory is recreated. Otherwise deleted.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CleanOutputTask.CleanOutputDir">
            <summary>
            If set output directory specified in <see cref="F:FlubuCore.Context.BuildProps.OutputDir"/> is deleted and recreated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CleanOutputTask.CleanBuildDir">
            <summary>
            If set Build directory specified in <see cref="F:FlubuCore.Context.BuildProps.BuildDir"/> is deleted and recreated.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.CompileSolutionTask">
            <inheritdoc />
            <summary>
            Task compiles solution with MsBuild.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.#ctor(FlubuCore.Services.IFlubuEnviromentService)">
            <summary>
            Task compiles specified solution with MSBuild.
            </summary>
            <param name="enviromentService"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.#ctor(System.String,System.String,FlubuCore.Services.IFlubuEnviromentService)">
            <inheritdoc />
            <summary>
            Task compiles specified solution with MSBuild.
            </summary>
            <param name="buildConfiguration"></param>
            <param name="enviromentService"></param>
            <param name="solutionFileName"></param>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.CompileSolutionTask.ToolsVersion">
            <summary>
            Msbuild version to be used for build.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.CompileSolutionTask.UseSolutionDirAsWorkingDir">
            <summary>
            Should we use solution directory for working folder
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.SolutionFileName(System.String)">
            <summary>
            Solution filename to build.
            </summary>
            <param name="solutionFileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.BuildConfiguration(System.String)">
            <summary>
            The build configuration solution will be build.
            </summary>
            <param name="buildConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.Platform(System.String)">
            <summary>
            Add's Platform argument to MSBuild. If not set CPUAny is used as default.
            </summary>
            <param name="platform">The platform.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.AddMsBuildPath(System.String)">
            <summary>
            Add location to msbuild. Full msbuild.exe file location must be specified. If msbuild is found at specified location msbuild wild not be searched at default locations it will use one specified here.
            If more than 1 path is specified first msbuild occurrence will be used. Otherwise if it is not found it will search for it in default locations.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.DoNotSetConfiguration">
            <summary>
            Configuration parameter won't be passed to msbuild command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.WithMaxCpuCount(System.Int32)">
            <summary>
            Sets the max CPU variable for msbuild
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.LogLevel(System.String)">
            <summary>
            Sets the logging level of console logger. See msbuild help for more details.
            </summary>
            <param name="level">Logging level (quiet, minimal,normal, detailed, and diagnostic)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.LogLevel(FlubuCore.Tasks.Solution.VSSolutionBrowsing.StandardVerbosityLevelParameters)">
            <summary>
            Sets the logging level of console logger. See msbuild help for more details.
            </summary>
            <param name="level">Logging level (quiet, minimal,normal, detailed, and diagnostic)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.LogOption(System.String)">
            <summary>
            Add console logger option(clp). See msbuild for more details.
            </summary>
            <param name="option">Option to set to the /clp parameter (NoSummary)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.LogOption(FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters)">
            <summary>
            Add console logger option(clp). See msbuild for more details.
            </summary>
            <param name="option">Option to set to the /clp parameter (NoSummary)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.WithTarget(System.String)">
            <summary>
            Add'sTarget argument to MSBuild.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.SetToolsVersion(System.Version)">
            <summary>
            Msbuild version to be used for build.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.UseSolutionDirectoryAsWorkingDir">
            <summary>
            Solution directory is used for working directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Solution.LoadSolutionTask.#ctor">
            <summary>
            Task load's solution to <see cref="T:FlubuCore.Context.BuildPropertiesSession"/> solution file name is retieved from <see cref="T:FlubuCore.Context.BuildPropertiesSession"/>
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.PerformanceSummary">
            <summary>
            Show time spent in tasks, targets and projects.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.Summary">
            <summary>
            Show error and warning summary at the end.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.NoSummary">
            <summary>
            Don't show error and warning summary at the end.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ErrorsOnly">
            <summary>
            Show only errors.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.WarningsOnly">
            <summary>
            Show only warnings.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.NoItemAndPropertyList">
            <summary>
            Don't show list of items and properties at the start of each project build.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ShowCommandLine">
            <summary>
            Show TaskCommandLineEvent messages
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ShowTimestamp">
            <summary>
            Display the Timestamp as a prefix to any message.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ShowEventId">
            <summary>
            Show eventId for started events, finished events, and messages
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ForceNoAlign">
            <summary>
            Does not align the text to the size of the console buffer
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.DisableConsoleColor">
            <summary>
            Use the default console colors for all logging messages.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.DisableMPLogging">
            <summary>
            Disable the multiprocessor logging style of output when running in non-multiprocessor mode.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.EnableMPLogging">
            <summary>
            Enable the multiprocessor logging style even when running in non-multiprocessor mode. This logging style is on by default.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Solution.StandardConsoleLoggerParameters.ForceConsoleColor">
            <summary>
            Use ANSI console colors even if console does not support it
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject">
            <summary>
            Represents a VisualStudio project.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Configurations">
            <summary>
            Gets a read-only collection of project configurations.
            </summary>
            <value>A read-only collection of project configurations.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Items">
            <summary>
            Gets a read-only collection of all .cs files in the solution.
            </summary>
            <value>A read-only collection of all the .cs files in the solution.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Properties">
            <summary>
            Gets a read-only collection of project properties.
            </summary>
            <value>A read-only collection of project properties.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Load(System.String)">
            <summary>
            Loads the specified project file name.
            </summary>
            <param name="projectFileName">Name of the project file.</param>
            <returns>VSProject class containing project information.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.FindConfiguration(System.String)">
            <summary>
            Finds the VisualStudio project configuration specified by a condition.
            </summary>
            <param name="condition">The condition which identifies the configuration
             (example: " '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ").</param>
            <returns><see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectConfiguration"/> object if found; <c>null</c> if no configuration was found that meets the
            specified condition.</returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectConfiguration">
            <summary>
            Contains information of compile configuration.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectItem">
            <summary>
            Holds information about content items inside of a VisualStudio project.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType">
            <summary>
            Contains information about a specific VisualStudio project type.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> class.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <param name="projectTypeName">Name of the project type.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.CSharpProjectType">
            <summary>
            Gets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for C# projects.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for C# projects.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.SolutionFolderProjectType">
            <summary>
            Gets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for solution folders.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for solution folders.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.ProjectTypeGuid">
            <summary>
            Gets the project type GUID.
            </summary>
            <value>The project type GUID.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.ProjectTypeName">
            <summary>
            Gets the name of the project type.
            </summary>
            <value>The name of the project type.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.op_Equality(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType,FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.op_Inequality(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType,FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.Equals(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
                An object to compare with this object.
            </param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo">
            <summary>
            Holds information about a VisualStudio project.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.Project">
            <summary>
            Gets or sets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject"/> object holding the detailed information about this VisualStudio
            project.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject"/> object .</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectDirectoryPath">
            <summary>
            Gets the path to the directory where the project file is located.
            </summary>
            <value>The project directory path.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileName">
            <summary>
            Gets the name of the project file. The file name is relative to the solution's directory.
            </summary>
            <remarks>The full path to the project file can be retrieved using the <see cref="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull"/>
            property.</remarks>
            <value>The name of the project file.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull">
            <summary>
            Gets the full path to the project file.
            </summary>
            <value>The full path to the project file.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.GetProjectOutputPath(System.String)">
            <summary>
            Gets the output path for a specified VisualStudio project. The output path is relative
            to the directory where the project file is located.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <returns>
            The output path or <c>null</c> if the project is not compatible.
            </returns>
            <exception cref="T:System.ArgumentException">The method could not extract the data from the project file.</exception>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution">
            <summary>
            Represents a VisualStudio solution.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.Projects">
            <summary>
            Gets a read-only collection of <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects for all of the projects in the solution.
            </summary>
            <value>A read-only collection of <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects .</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.Load(System.String)">
            <summary>
            Loads the specified VisualStudio solution file and returns a <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution"/> representing the solution.
            </summary>
            <param name="fileName">The name of the solution file.</param>
            <returns>A <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution"/> representing the solution.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.ForEachProject(System.Action{FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectInfo})">
            <summary>
            Performs the specified action on each project of the solution.
            </summary>
            <param name="action">The action delegate to perform on each project.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.LoadProjects">
            <summary>
            Loads the VisualStudio project files and fills the project data into <see cref="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.Project"/>
            properties for each of the project in the solution.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.TaskBase`2">
            <summary>
                A base abstract class from which tasks can be implemented.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.TaskStopwatch">
            <summary>
            Stopwatch for timings.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.DoNotFail">
            <summary>
             Should the task fail if an error occurs.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.DoRetry">
            <summary>
            Do retry if set to true.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.RetryDelay">
            <summary>
            Delay in ms between retries.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.Context">
            <summary>
            Task context. It will be set after the execute method.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.DoNotLog">
            <summary>
            If set to true, task should not log anything.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.NumberOfRetries">
            <summary>
            Number of retries in case of an exception.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`2.LogDuration">
            <summary>
                Gets a value indicating whether the duration of the task should be logged after the task
                has finished.
            </summary>
            <value><c>true</c> if duration should be logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoNotFailOnError(System.Action{System.Exception},System.Func{FlubuCore.Context.ITaskContext,System.Exception,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.NoLog">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.Retry(System.Int32,System.Int32,System.Func{FlubuCore.Context.ITaskContext,System.Exception,System.Boolean})">
            <inheritdoc />
            <summary>
            </summary>
            <param name="numberOfRetries">Number of retries before task fails.</param>
            <param name="delay">Delay time in miliseconds between retries.</param>
            <param name="condition">Condition when retry will occur. If condition is null task is always retried. </param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.ExecuteVoid(FlubuCore.Context.ITaskContext)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.ExecuteVoidAsync(FlubuCore.Context.ITaskContext)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.Execute(FlubuCore.Context.ITaskContext)">
            <inheritdoc />
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <remarks>
                This method implements the basic reporting and error handling for
                classes which inherit the <see>
                    <cref>TaskBase</cref>
                </see>
                class.
            </remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.ExecuteAsync(FlubuCore.Context.ITaskContext)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoExecuteAsync(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Virtual method defining the actual work for a task.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoLogInfo(System.String)">
            <summary>
            Log info if task logging is not disabled.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoLogInfo(System.String,System.Drawing.Color)">
            <summary>
            Log info if task logging is not disabled.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoLogError(System.String)">
            <summary>
            Log error if task logging is not disabled.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`2.DoLogError(System.String,System.Drawing.Color)">
            <summary>
            Log error if task logging is not disabled.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Target(System.String)">
            <summary>
            Path to the test runner application.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.TargetArgs(System.String[])">
            <summary>
            Arguments to be passed to the test runner.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Output(System.String)">
            <summary>
            Output of the generated coverage report.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Verbosity(System.String)">
            <summary>
             Sets the verbosity level of the command. Allowed values are quiet, minimal, normal, detailed.
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Format(System.String)">
            <summary>
            Format of the generated coverage report.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Treshold(System.Int32)">
            <summary>
            Exits with error if the coverage % is below value.
            </summary>
            <param name="treshold"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.TresholdType(System.String)">
            <summary>
            Coverage type to apply the threshold to.
            </summary>
            <param name="tresholdType"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.TresholdStat(System.String)">
            <summary>
            Coverage statistic used to enforce the threshold value.
            </summary>
            <param name="tresholdStat"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Exclude(System.String)">
            <summary>
             Filter expressions to exclude specific modules and types.
            </summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.Include(System.String)">
            <summary>
            Filter expressions to include specific modules and types.
            </summary>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.IncludeDirectory(System.String)">
            <summary>
            Include directories containing additional assemblies to be instrumented.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.ExludeByFile(System.String)">
            <summary>
            Glob patterns specifying source files to exclude.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.ExcludeByAttribute(System.String)">
            <summary>
            Attributes to exclude from code coverage.
            </summary>
            <param name="exclude"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.IncludeTestAssembly">
            <summary>
            Specifies whether to report code coverage of the test assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.SingeHit">
            <summary>
            Specifies whether to limit code coverage hit reporting to a single hit for each location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.CoverletTask.MergeWith(System.String)">
            <summary>
            Path to existing coverage result to merge.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NunitCmdOptions.NoOptions">
            <summary>
            No nunit options are added.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NunitCmdOptions.V2">
            <summary>
            Default options for nunit V2 are added.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NunitCmdOptions.V3">
            <summary>
            Default options for nunit v3 are added.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Testing.NUnitTask">
            <inheritdoc />
            <summary>
            Run NUnit tests with NUnit console runner.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._workingDirectory">
            <summary>
            unit test working directory.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._categories">
            <summary>
             test categories that will be included/excluded in tests.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._targetFramework">
            <summary>
            .NET framework NUnit console should run under.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Testing.NUnitTask"/> class.
            </summary>
            <param name="nunitConsoleFileName">full file path to nunit console runner</param>
            <param name="projectNames">Unit test project name.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Testing.NUnitTask.TestAssemblyFileNames">
            <summary>
            Gets a list of assemblies to be tested
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ForNunitV2(System.String[])">
            <summary>
            Initializes NunitTask with default command line options for nunit V2.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ForNunitV3(System.String[])">
            <summary>
            Initializes NunitTask with default command line options for nunit V3.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.WithVerbose">
            <summary>
            Adds verbose options
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ExcludeCategory(System.String)">
            <summary>
            Excludes category from test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The Categorie to be excluded</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.IncludeCategory(System.String)">
            <summary>
            Include category in test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The category to be included</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.SetTargetFramework(System.String)">
            <summary>
            Sets the .NET framework NUnit console should run under. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="framework">Targeted .net framework</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.SetNunitConsoleFilePath(System.String)">
            <summary>
            Full file Path to the nunit console runner.
            </summary>
            <param name="nunitConsoleFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.Configuration(System.String)">
            <summary>
            Build configuration the tests fill be run under.
            </summary>
            <param name="configruation"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)">
            <summary>
             Add nunit command line option. Can be used multiple times.
            </summary>
            <param name="nunitCmdOption">nunit command line option to be added.</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.NunitConsolePath(System.String)">
            <summary>
            Full file path to nunit console runner. If not set task tries to get path from  context build propertie <see cref="F:FlubuCore.Context.BuildProps.NUnitConsolePath"/>
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
            <summary>
            Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask">
            <summary>
                Runs NUnit tests in combination with dotCover test coverage analysis.
            </summary>
            <remarks>
                <para>
                    The task uses dotCover command line tool to run NUnit command line runner
                    which executes tests for the specified assembly or C# project.
                </para>
                <para>
                    The task uses <see cref="T:FlubuCore.Tasks.Nuget.DownloadNugetPackageInUserRepositoryTask" /> to download dotCover command
                    line tool into the running user's local application data directory. If the tool is already there,
                    the task skips downloading it.
                </para>
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.#ctor(System.String,System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask" /> class that
                will execute tests in the specified <see cref="F:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask._testAssemblyFileNames" /> list of test assemblies using
                the specified NUnit test runner executable.
            </summary>
            <param name="nunitRunnerFileName">The file path to NUnit's console runner.</param>
            <param name="testAssemblyFileNames">The list of of file paths to the assemblies containing unit tests.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.CoverageXmlReportFileName">
            <summary>
                Gets the path to the generated dotCover test coverage XML report.
            </summary>
            <seealso cref="P:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.CoverageHtmlReportFileName" />
        </member>
        <member name="P:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.CoverageHtmlReportFileName">
            <summary>
                Gets the path to the generated dotCover test coverage HTML report.
            </summary>
            <seealso cref="P:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.CoverageXmlReportFileName" />
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.FailBuildOnViolations">
            <summary>
                If Set build will fail if the test coverage of any
                class is below <see cref="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.MinRequiredCoverage(System.Int32)" />.
            </summary>
            <remarks>
                If <see cref="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.FailBuildOnViolations" />
                is not set the task will only print out information about violating classes
                without failing the build.
                The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.MinRequiredCoverage(System.Int32)">
            <summary>
                Sets the minimum required test coverage percentage.
                If any class has the test coverage below this value and <see cref="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.FailBuildOnViolations" />
                is set to <c>true</c>, the task will fail the build.
            </summary>
            <remarks>
                The default value is 75%.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.NUnitCmdLineOptions(System.String)">
            <summary>
                Sets the command line options for NUnit console runner (as a single string).
            </summary>
            <remarks>
                The default options are <c>/labels /nodots</c>.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.DotCoverFilters(System.String)">
            <summary>
                Sets the dotCover filters that will be passed to dotCover's <c>/Filters</c> command line parameter.
            </summary>
            <remarks>
                The default filters are set to <c>-:module=*.Tests;-:class=*Contract;-:class=*Contract`*</c>.
                For more information, visit
                <a href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html">here</a>.
            </remarks>
            <seealso cref="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.DotCoverAttributeFilters(System.String)" />
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.DotCoverAttributeFilters(System.String)">
            <summary>
                Sets the dotCover attribute filters that will be passed to dotCover's <c>/AttributeFilters</c> command line
                parameter.
                Attribute filters tell dotCover to skip the analysis of any code that has the specified attribute(s) applied.
            </summary>
            <remarks>
                The default attribute filters are set to <c>"*.ExcludeFromCodeCoverageAttribute"</c>.
                For more information, visit
                <a href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html">here</a>.
            </remarks>
            <seealso cref="M:FlubuCore.Tasks.Testing.NUnitWithDotCoverTask.DotCoverFilters(System.String)" />
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.AppVeyor">
            <summary>
            forces AppVeyor CI mode (normally auto-detected)
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.Json">
            <summary>
            show progress messages in JSON format
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.Quiet">
            <summary>
            do not show progress messages
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.TeamCity">
            <summary>
            forces TeamCity mode (normally auto-detected)
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.Verbose">
            <summary>
            show verbose progress messages
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ReportMode.None">
            <summary>
            Auto detect.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ResultFormat.Xml">
            <summary>
            output results to xUnit.net v2 XML file
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ResultFormat.XmlV1">
            <summary>
            output results to xUnit.net v1 XML file
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ResultFormat.Html">
            <summary>
            output results to HTML file
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.ResultFormat.Nunit">
            <summary>
            output results to NUnit v2.5 XML file
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.Xunit.XunitTask._workingDirectory">
            <summary>
            unit test working directory.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Testing.Xunit.XunitTask.TestAssemblyFileNames">
            <summary>
            Gets a list of assemblies to be tested
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.Configuration(System.String)">
            <summary>
            Build configuration the tests fill be run under.
            </summary>
            <param name="configruation"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.XUnitConsolePath(System.String)">
            <summary>
            Full file path to the xunit console runner. If not set task tries to get path from context build propertie <see cref="F:FlubuCore.Context.BuildProps.XUnitConsolePath"/>
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.FailSkips">
            <summary>
            convert skipped tests into failures
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.StopOnFail">
            <summary>
            stop on first test failure
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.Trait(System.String,System.String)">
            <summary>
            only run tests with matching name/value traits
            if specified more than once, acts as an OR operation
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.NoTrait(System.String,System.String)">
            <summary>
            do not run tests with matching name/value traits
            if specified more than once, acts as an AND operation
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.AddResultFormat(FlubuCore.Tasks.Testing.Xunit.ResultFormat,System.String)">
            <summary>
            Result formats: (optional, choose one or more)
            </summary>
            <param name="format"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.Xunit.XunitTask.AddXUnitOption(System.String)">
            <summary>
            Add custom xunit option. For example '-noshadow'. See xunit console runner for available options.
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Text.EvaluateXmlTask">
            <summary>
            Evaluates XPath expressions on a specified XML file and stores results in <seealso cref="T:FlubuCore.Context.ITaskContext"/> properties.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Text.EvaluateXmlTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:FlubuCore.Tasks.Text.ReplaceTokensTask">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.SourceFileEncoding(System.Text.Encoding)">
            <summary>
            Sets the encoding of the source file. Default is UTF8
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.DestionationFileEncoding(System.Text.Encoding)">
            <summary>
            Sets the encoding of the destination file. Default is UTF8.
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.UseToken(System.String)">
            <summary>
            Use token prefix and suffix for key. {token}{key}{token} will be replaced with key's value.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.ToDestination(System.String)">
            <summary>
            Sets the destination filename. If not specified source file will be replaced.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.Replace(System.String,System.String)">
            <summary>
            Replace old value with the new one.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.Replace(System.Tuple{System.String,System.String}[])">
            <summary>
            Replace old value with the new one.
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.UseTmpFile">
            <summary>
            Create new file with the source file name and appended with .tmp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.ReplaceTokensTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Output(System.String)">
            <summary>
            Set the fileName of the new json file. If not set same file is updated.
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.String)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Int32)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Int64)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Double)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Decimal)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.DateTime)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JValue}[])">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.FailIfPropertyNotFound(System.Boolean)">
            <summary>
            If <c>true</c> task fails with exception if any of the properties to be updated are not found.
            </summary>
            <param name="fail"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Text.UpdateXmlFileTask">
            <summary>
                Updates an XML file using the specified update commands.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Text.UpdateXmlFileTask" /> class with
                the specified XML file to be updated.
            </summary>
            <param name="fileName">The fileName of the XML file.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.UpdatePath(System.String,System.String)">
            <summary>
                Adds an "update" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be updated.</param>
            <param name="value">New value of the selected nodes.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.DeletePath(System.String)">
            <summary>
                Adds an "delete" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be deleted.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddOrUpdate(System.String,System.String)">
            <summary>
                Adds an "add or update" command to the list of commands to be performed on the XML file. Depending on if the xml
                element exists or not.
            </summary>
            <param name="xpath"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.String)">
            <summary>
                Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="value">The value for the new child node.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String)">
            <summary>
                Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="attributes">Attributes to be added.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Text.VisitXmlFileTask">
            <summary>
            Runs XPath queries on the specified XML file and provides an interface for visiting each query result.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Text.VisitXmlFileTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Text.VisitXmlFileTask"/> class with the specified
            XML file to be analyzed.
            </summary>
            <param name="xmlFileName">
            File name of the XML file to be queried.
            </param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.VisitXmlFileTask.AddVisitor(System.String,System.Func{System.Xml.XmlNode,System.Boolean})">
            <summary>
            Adds a visitor to be used for querying a specific XPath.
            </summary>
            <param name="xpath">XPath to be queried.</param>
            <param name="visitorFunc">The function that should be called on each XML node found by the query.</param>
            <returns>This same instance of the <see cref="T:FlubuCore.Tasks.Text.VisitXmlFileTask"/>.</returns>
        </member>
        <member name="T:FlubuCore.Tasks.Utils.ServiceControlTask">
            <summary>
            Control windows service with sc.exe command.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Utils.ServiceControlTaskBase`1">
            <summary>
            Base class for <see cref="T:FlubuCore.Tasks.Utils.ServiceControlTask" />
            </summary>
            <typeparam name="TTask"></typeparam>
        </member>
        <member name="M:FlubuCore.Tasks.Utils.ServiceControlTaskBase`1.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Tasks.Utils.ServiceControlTaskBase`1.UseServer(System.String)">
            <summary>
            Control services on another machine.
            </summary>
            <param name="server">Machine to control. It must be in \\ServerName format.</param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Utils.ServiceCreateTask">
            <summary>
            Creates a service entry in the registry and Service Database.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Utils.ServiceCreateTask.StartMode(FlubuCore.Tasks.Utils.ServiceStartMode)">
            <summary>
            Set start mode of the service.
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Utils.SleepTask">
            <inheritdoc />
            <summary>
            Sleep task. Just wait for specified period of time.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Utils.SleepTask.#ctor(System.Int32)">
            <summary>
            Constructs new <see cref="T:FlubuCore.Tasks.Utils.SleepTask"/>
            </summary>
            <param name="delay">Delay in milliseconds</param>
        </member>
        <member name="M:FlubuCore.Tasks.Utils.SleepTask.#ctor(System.TimeSpan)">
            <summary>
            Constructs new <see cref="T:FlubuCore.Tasks.Utils.SleepTask"/>
            </summary>
            <param name="delay">Amount of time to sleep.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Utils.SleepTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
        </member>
        <member name="F:FlubuCore.Tasks.Utils.StandardServiceControlCommands.Start">
            <summary>
            Starts a windows service.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Utils.StandardServiceControlCommands.Stop">
            <summary>
            Sends a STOP request to a windows service.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Utils.StandardServiceControlCommands.Create">
            <summary>
            Creates a windows service.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Utils.StandardServiceControlCommands.Delete">
            <summary>
            Deletes a windows service.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask.RemovePrefix(System.String)">
            <summary>
            Removes prefix from version.
            For example if u write version in file like so: ## 1.0.0.0 specify '##' as prefix to remove.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask.AllowSuffix">
            <summary>
            When specified version allows to have suffix. Suffix must contain whitespace.
            For example 1.0.0.0 (28.1.2019)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask.DoNotSaveVersionToSession">
            <summary>
            When set task does not store Version information to session <see cref="F:FlubuCore.Context.BuildProps.BuildVersion"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask.ProjectVersionFileName(System.String)">
            <summary>
            File name where project version will be retrieved from. If not set one of the default file names is used.
            Defaults: Changelog.md, ReleaseNotes.md, ReleaseNotes.txt, {ProductId from session}.ProjectVersion.md, {ProductId from session}.ProjectVersion.txt
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchVersionFromExternalSourceTask.WithRevisionNumber(System.String)">
            <summary>
            Fetches revision number from given enviroment variable if it exists
            </summary>
            <param name="envName">Name of the enviroment variable</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchVersionFromExternalSourceTask.IgnoreDefaultBuildSystems">
            <summary>
            Ignores fetching of build number and revision number from build systems that this task supports by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Path(System.String)">
            <summary>
             The directory containing .git. If not defined current directory is used. (Must be first argument).
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Diagnostic">
            <summary>
            Runs GitVersion with additional diagnostic information (requires git.exe to be installed)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Output(FlubuCore.Tasks.Versioning.GitVersionOutput)">
            <summary>
            Determines the output to the console. Can be either 'json' or 'buildserver', will default to 'json'.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.ShowVariable(System.String)">
            <summary>
            Used in conjuntion with /output json, will output just a particular variable.
            eg /output json /showvariable SemVer - will output `1.2.3+beta.4`
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.LogFile(System.String)">
            <summary>
            Path to logfile.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.ShowConfig">
            <summary>
            Outputs the effective GitVersion config (defaults + custom from GitVersion.yml) in yaml format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.OverrideConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Overrides GitVersion config values inline (semicolon-separated key value pairs e.g. /overrideconfig tag-prefix=Foo)
            </summary>
            <param name="configs"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.NoCache">
            <summary>
             Bypasses the cache, result will not be written to the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.UpdateAssemblyInfo">
            <summary>
             Will recursively search for all 'AssemblyInfo.cs' files in the git repo and update them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.UpdateAssemblyInfoFilename(System.String)">
            <summary>
            Specify name of AssemblyInfo file. Can also /updateAssemblyInfo GlobalAssemblyInfo.cs as a shorthand
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.EnsureAssemblyInfo">
            <summary>
               If the assembly info file specified with /updateassemblyinfo or /updateassemblyinfofilename is not found,
            it be created with these attributes: AssemblyFileVersion, AssemblyVersion and AssemblyInformationalVersion
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.GitUrl(System.String)">
            <summary>
            Url to remote git repository.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Branch(System.String)">
            <summary>
            Name of the branch to use on the remote repository, must be used in combination with /url.
            </summary>
            <param name="branch"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Username(System.String)">
            <summary>
            Username in case authentication is required.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Password(System.String)">
            <summary>
            Password in case authentication is required.
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Commit(System.String)">
            <summary>
            The commit id to check. If not specified, the latest available commit on the specified branch will be used.
            </summary>
            <param name="commitId"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.DynamicRepoLocation(System.String)">
            <summary>
             By default dynamic repositories will be cloned to %tmp%. Use this switch to override
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.NoFetch">
            <summary>
             Disables 'git fetch' during version calculation. Might cause GitVersion to not calculate your version as expected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Executable(System.String)">
            <summary>
            Executes target executable making GitVersion variables available as environmental variables.
            </summary>
            <param name="executable"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.ExecutableArguments(System.String)">
            <summary>
            Arguments for the executable specified by /exec.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.MsBuildProject(System.String)">
            <summary>
             Build a msbuild file, GitVersion variables will be passed as msbuild properties
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.MsBuildProjectArguments(System.String)">
            <summary>
            Additional arguments to pass to msbuild.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.GitVersionTask.Verbosity(System.String)">
            <summary>
            Set Verbosity level (debug, info, warn, error, none). Default is info
            </summary>
            <param name="verbosity"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.UpdateNetCoreVersionTask.FixedVersion(System.Version)">
            <summary>
            Use fixed version instead of fetching one from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/> build property named: <see cref="F:FlubuCore.Context.BuildProps.BuildVersion"/>
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.UpdateNetCoreVersionTask.AdditionalProp(System.String[])">
            <summary>
            Adds additional properties to be updated with the version.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.UpdateNetCoreVersionTask.AddFiles(System.String[])">
            <summary>
            Adds Project (json/cproj) files to be updated.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
    </members>
</doc>
